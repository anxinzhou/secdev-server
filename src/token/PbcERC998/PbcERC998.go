// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PbcERC998

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PbcERC998ABI is the input ABI used to generate the binding from.
const PbcERC998ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childContractByIndex\",\"outputs\":[{\"name\":\"childContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childTokenByIndex\",\"outputs\":[{\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_childContract\",\"type\":\"address\"}],\"name\":\"totalChildTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"childContract\",\"type\":\"address\"},{\"name\":\"childTokenId\",\"type\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintERC721Child\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"childExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"erc20ContractByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalChildContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalERC20Contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"childContract\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnERC20Child\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"getChild\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"transferChild\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"childContract\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintERC20Child\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"childContract\",\"type\":\"address\"},{\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"name\":\"burnERC721Child\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_erc20Contract\",\"type\":\"address\"}],\"name\":\"balanceOfERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOfChild\",\"outputs\":[{\"name\":\"parentTokenOwner\",\"type\":\"bytes32\"},{\"name\":\"parentTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOfChild\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceivedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ReceivedChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"TransferChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"}]"

// PbcERC998Bin is the compiled bytecode used for deploying new contracts.
const PbcERC998Bin = ``

// DeployPbcERC998 deploys a new Ethereum contract, binding an instance of PbcERC998 to it.
func DeployPbcERC998(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string) (common.Address, *types.Transaction, *PbcERC998, error) {
	parsed, err := abi.JSON(strings.NewReader(PbcERC998ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PbcERC998Bin), backend, name, symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PbcERC998{PbcERC998Caller: PbcERC998Caller{contract: contract}, PbcERC998Transactor: PbcERC998Transactor{contract: contract}, PbcERC998Filterer: PbcERC998Filterer{contract: contract}}, nil
}

// PbcERC998 is an auto generated Go binding around an Ethereum contract.
type PbcERC998 struct {
	PbcERC998Caller     // Read-only binding to the contract
	PbcERC998Transactor // Write-only binding to the contract
	PbcERC998Filterer   // Log filterer for contract events
}

// PbcERC998Caller is an auto generated read-only Go binding around an Ethereum contract.
type PbcERC998Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PbcERC998Transactor is an auto generated write-only Go binding around an Ethereum contract.
type PbcERC998Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PbcERC998Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PbcERC998Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PbcERC998Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PbcERC998Session struct {
	Contract     *PbcERC998        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PbcERC998CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PbcERC998CallerSession struct {
	Contract *PbcERC998Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// PbcERC998TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PbcERC998TransactorSession struct {
	Contract     *PbcERC998Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// PbcERC998Raw is an auto generated low-level Go binding around an Ethereum contract.
type PbcERC998Raw struct {
	Contract *PbcERC998 // Generic contract binding to access the raw methods on
}

// PbcERC998CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PbcERC998CallerRaw struct {
	Contract *PbcERC998Caller // Generic read-only contract binding to access the raw methods on
}

// PbcERC998TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PbcERC998TransactorRaw struct {
	Contract *PbcERC998Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPbcERC998 creates a new instance of PbcERC998, bound to a specific deployed contract.
func NewPbcERC998(address common.Address, backend bind.ContractBackend) (*PbcERC998, error) {
	contract, err := bindPbcERC998(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PbcERC998{PbcERC998Caller: PbcERC998Caller{contract: contract}, PbcERC998Transactor: PbcERC998Transactor{contract: contract}, PbcERC998Filterer: PbcERC998Filterer{contract: contract}}, nil
}

// NewPbcERC998Caller creates a new read-only instance of PbcERC998, bound to a specific deployed contract.
func NewPbcERC998Caller(address common.Address, caller bind.ContractCaller) (*PbcERC998Caller, error) {
	contract, err := bindPbcERC998(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PbcERC998Caller{contract: contract}, nil
}

// NewPbcERC998Transactor creates a new write-only instance of PbcERC998, bound to a specific deployed contract.
func NewPbcERC998Transactor(address common.Address, transactor bind.ContractTransactor) (*PbcERC998Transactor, error) {
	contract, err := bindPbcERC998(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PbcERC998Transactor{contract: contract}, nil
}

// NewPbcERC998Filterer creates a new log filterer instance of PbcERC998, bound to a specific deployed contract.
func NewPbcERC998Filterer(address common.Address, filterer bind.ContractFilterer) (*PbcERC998Filterer, error) {
	contract, err := bindPbcERC998(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PbcERC998Filterer{contract: contract}, nil
}

// bindPbcERC998 binds a generic wrapper to an already deployed contract.
func bindPbcERC998(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PbcERC998ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PbcERC998 *PbcERC998Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _PbcERC998.Contract.PbcERC998Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PbcERC998 *PbcERC998Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PbcERC998.Contract.PbcERC998Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PbcERC998 *PbcERC998Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PbcERC998.Contract.PbcERC998Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PbcERC998 *PbcERC998CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _PbcERC998.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PbcERC998 *PbcERC998TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PbcERC998.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PbcERC998 *PbcERC998TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PbcERC998.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(owner address) constant returns(uint256)
func (_PbcERC998 *PbcERC998Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "balanceOf", owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(owner address) constant returns(uint256)
func (_PbcERC998 *PbcERC998Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _PbcERC998.Contract.BalanceOf(&_PbcERC998.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(owner address) constant returns(uint256)
func (_PbcERC998 *PbcERC998CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _PbcERC998.Contract.BalanceOf(&_PbcERC998.CallOpts, owner)
}

// BalanceOfERC20 is a free data retrieval call binding the contract method 0xe226ed22.
//
// Solidity: function balanceOfERC20(_tokenId uint256, _erc20Contract address) constant returns(uint256)
func (_PbcERC998 *PbcERC998Caller) BalanceOfERC20(opts *bind.CallOpts, _tokenId *big.Int, _erc20Contract common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "balanceOfERC20", _tokenId, _erc20Contract)
	return *ret0, err
}

// BalanceOfERC20 is a free data retrieval call binding the contract method 0xe226ed22.
//
// Solidity: function balanceOfERC20(_tokenId uint256, _erc20Contract address) constant returns(uint256)
func (_PbcERC998 *PbcERC998Session) BalanceOfERC20(_tokenId *big.Int, _erc20Contract common.Address) (*big.Int, error) {
	return _PbcERC998.Contract.BalanceOfERC20(&_PbcERC998.CallOpts, _tokenId, _erc20Contract)
}

// BalanceOfERC20 is a free data retrieval call binding the contract method 0xe226ed22.
//
// Solidity: function balanceOfERC20(_tokenId uint256, _erc20Contract address) constant returns(uint256)
func (_PbcERC998 *PbcERC998CallerSession) BalanceOfERC20(_tokenId *big.Int, _erc20Contract common.Address) (*big.Int, error) {
	return _PbcERC998.Contract.BalanceOfERC20(&_PbcERC998.CallOpts, _tokenId, _erc20Contract)
}

// ChildContractByIndex is a free data retrieval call binding the contract method 0x0d5a621b.
//
// Solidity: function childContractByIndex(_tokenId uint256, _index uint256) constant returns(childContract address)
func (_PbcERC998 *PbcERC998Caller) ChildContractByIndex(opts *bind.CallOpts, _tokenId *big.Int, _index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "childContractByIndex", _tokenId, _index)
	return *ret0, err
}

// ChildContractByIndex is a free data retrieval call binding the contract method 0x0d5a621b.
//
// Solidity: function childContractByIndex(_tokenId uint256, _index uint256) constant returns(childContract address)
func (_PbcERC998 *PbcERC998Session) ChildContractByIndex(_tokenId *big.Int, _index *big.Int) (common.Address, error) {
	return _PbcERC998.Contract.ChildContractByIndex(&_PbcERC998.CallOpts, _tokenId, _index)
}

// ChildContractByIndex is a free data retrieval call binding the contract method 0x0d5a621b.
//
// Solidity: function childContractByIndex(_tokenId uint256, _index uint256) constant returns(childContract address)
func (_PbcERC998 *PbcERC998CallerSession) ChildContractByIndex(_tokenId *big.Int, _index *big.Int) (common.Address, error) {
	return _PbcERC998.Contract.ChildContractByIndex(&_PbcERC998.CallOpts, _tokenId, _index)
}

// ChildExists is a free data retrieval call binding the contract method 0x5680a3ad.
//
// Solidity: function childExists(_childContract address, _childTokenId uint256) constant returns(bool)
func (_PbcERC998 *PbcERC998Caller) ChildExists(opts *bind.CallOpts, _childContract common.Address, _childTokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "childExists", _childContract, _childTokenId)
	return *ret0, err
}

// ChildExists is a free data retrieval call binding the contract method 0x5680a3ad.
//
// Solidity: function childExists(_childContract address, _childTokenId uint256) constant returns(bool)
func (_PbcERC998 *PbcERC998Session) ChildExists(_childContract common.Address, _childTokenId *big.Int) (bool, error) {
	return _PbcERC998.Contract.ChildExists(&_PbcERC998.CallOpts, _childContract, _childTokenId)
}

// ChildExists is a free data retrieval call binding the contract method 0x5680a3ad.
//
// Solidity: function childExists(_childContract address, _childTokenId uint256) constant returns(bool)
func (_PbcERC998 *PbcERC998CallerSession) ChildExists(_childContract common.Address, _childTokenId *big.Int) (bool, error) {
	return _PbcERC998.Contract.ChildExists(&_PbcERC998.CallOpts, _childContract, _childTokenId)
}

// ChildTokenByIndex is a free data retrieval call binding the contract method 0x160b01a1.
//
// Solidity: function childTokenByIndex(_tokenId uint256, _childContract address, _index uint256) constant returns(childTokenId uint256)
func (_PbcERC998 *PbcERC998Caller) ChildTokenByIndex(opts *bind.CallOpts, _tokenId *big.Int, _childContract common.Address, _index *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "childTokenByIndex", _tokenId, _childContract, _index)
	return *ret0, err
}

// ChildTokenByIndex is a free data retrieval call binding the contract method 0x160b01a1.
//
// Solidity: function childTokenByIndex(_tokenId uint256, _childContract address, _index uint256) constant returns(childTokenId uint256)
func (_PbcERC998 *PbcERC998Session) ChildTokenByIndex(_tokenId *big.Int, _childContract common.Address, _index *big.Int) (*big.Int, error) {
	return _PbcERC998.Contract.ChildTokenByIndex(&_PbcERC998.CallOpts, _tokenId, _childContract, _index)
}

// ChildTokenByIndex is a free data retrieval call binding the contract method 0x160b01a1.
//
// Solidity: function childTokenByIndex(_tokenId uint256, _childContract address, _index uint256) constant returns(childTokenId uint256)
func (_PbcERC998 *PbcERC998CallerSession) ChildTokenByIndex(_tokenId *big.Int, _childContract common.Address, _index *big.Int) (*big.Int, error) {
	return _PbcERC998.Contract.ChildTokenByIndex(&_PbcERC998.CallOpts, _tokenId, _childContract, _index)
}

// Erc20ContractByIndex is a free data retrieval call binding the contract method 0x627c81ff.
//
// Solidity: function erc20ContractByIndex(_tokenId uint256, _index uint256) constant returns(address)
func (_PbcERC998 *PbcERC998Caller) Erc20ContractByIndex(opts *bind.CallOpts, _tokenId *big.Int, _index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "erc20ContractByIndex", _tokenId, _index)
	return *ret0, err
}

// Erc20ContractByIndex is a free data retrieval call binding the contract method 0x627c81ff.
//
// Solidity: function erc20ContractByIndex(_tokenId uint256, _index uint256) constant returns(address)
func (_PbcERC998 *PbcERC998Session) Erc20ContractByIndex(_tokenId *big.Int, _index *big.Int) (common.Address, error) {
	return _PbcERC998.Contract.Erc20ContractByIndex(&_PbcERC998.CallOpts, _tokenId, _index)
}

// Erc20ContractByIndex is a free data retrieval call binding the contract method 0x627c81ff.
//
// Solidity: function erc20ContractByIndex(_tokenId uint256, _index uint256) constant returns(address)
func (_PbcERC998 *PbcERC998CallerSession) Erc20ContractByIndex(_tokenId *big.Int, _index *big.Int) (common.Address, error) {
	return _PbcERC998.Contract.Erc20ContractByIndex(&_PbcERC998.CallOpts, _tokenId, _index)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(tokenId uint256) constant returns(bool)
func (_PbcERC998 *PbcERC998Caller) Exists(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "exists", tokenId)
	return *ret0, err
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(tokenId uint256) constant returns(bool)
func (_PbcERC998 *PbcERC998Session) Exists(tokenId *big.Int) (bool, error) {
	return _PbcERC998.Contract.Exists(&_PbcERC998.CallOpts, tokenId)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(tokenId uint256) constant returns(bool)
func (_PbcERC998 *PbcERC998CallerSession) Exists(tokenId *big.Int) (bool, error) {
	return _PbcERC998.Contract.Exists(&_PbcERC998.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_PbcERC998 *PbcERC998Caller) GetApproved(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "getApproved", _tokenId)
	return *ret0, err
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_PbcERC998 *PbcERC998Session) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _PbcERC998.Contract.GetApproved(&_PbcERC998.CallOpts, _tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_PbcERC998 *PbcERC998CallerSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _PbcERC998.Contract.GetApproved(&_PbcERC998.CallOpts, _tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(bool)
func (_PbcERC998 *PbcERC998Caller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "isApprovedForAll", _owner, _operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(bool)
func (_PbcERC998 *PbcERC998Session) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _PbcERC998.Contract.IsApprovedForAll(&_PbcERC998.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(bool)
func (_PbcERC998 *PbcERC998CallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _PbcERC998.Contract.IsApprovedForAll(&_PbcERC998.CallOpts, _owner, _operator)
}

// IsLocked is a free data retrieval call binding the contract method 0xf6aacfb1.
//
// Solidity: function isLocked(tokenId uint256) constant returns(bool)
func (_PbcERC998 *PbcERC998Caller) IsLocked(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "isLocked", tokenId)
	return *ret0, err
}

// IsLocked is a free data retrieval call binding the contract method 0xf6aacfb1.
//
// Solidity: function isLocked(tokenId uint256) constant returns(bool)
func (_PbcERC998 *PbcERC998Session) IsLocked(tokenId *big.Int) (bool, error) {
	return _PbcERC998.Contract.IsLocked(&_PbcERC998.CallOpts, tokenId)
}

// IsLocked is a free data retrieval call binding the contract method 0xf6aacfb1.
//
// Solidity: function isLocked(tokenId uint256) constant returns(bool)
func (_PbcERC998 *PbcERC998CallerSession) IsLocked(tokenId *big.Int) (bool, error) {
	return _PbcERC998.Contract.IsLocked(&_PbcERC998.CallOpts, tokenId)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_PbcERC998 *PbcERC998Caller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_PbcERC998 *PbcERC998Session) Name() (string, error) {
	return _PbcERC998.Contract.Name(&_PbcERC998.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_PbcERC998 *PbcERC998CallerSession) Name() (string, error) {
	return _PbcERC998.Contract.Name(&_PbcERC998.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_PbcERC998 *PbcERC998Caller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "ownerOf", _tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_PbcERC998 *PbcERC998Session) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _PbcERC998.Contract.OwnerOf(&_PbcERC998.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_PbcERC998 *PbcERC998CallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _PbcERC998.Contract.OwnerOf(&_PbcERC998.CallOpts, _tokenId)
}

// OwnerOfChild is a free data retrieval call binding the contract method 0xeadb80b8.
//
// Solidity: function ownerOfChild(_childContract address, _childTokenId uint256) constant returns(parentTokenOwner bytes32, parentTokenId uint256)
func (_PbcERC998 *PbcERC998Caller) OwnerOfChild(opts *bind.CallOpts, _childContract common.Address, _childTokenId *big.Int) (struct {
	ParentTokenOwner [32]byte
	ParentTokenId    *big.Int
}, error) {
	ret := new(struct {
		ParentTokenOwner [32]byte
		ParentTokenId    *big.Int
	})
	out := ret
	err := _PbcERC998.contract.Call(opts, out, "ownerOfChild", _childContract, _childTokenId)
	return *ret, err
}

// OwnerOfChild is a free data retrieval call binding the contract method 0xeadb80b8.
//
// Solidity: function ownerOfChild(_childContract address, _childTokenId uint256) constant returns(parentTokenOwner bytes32, parentTokenId uint256)
func (_PbcERC998 *PbcERC998Session) OwnerOfChild(_childContract common.Address, _childTokenId *big.Int) (struct {
	ParentTokenOwner [32]byte
	ParentTokenId    *big.Int
}, error) {
	return _PbcERC998.Contract.OwnerOfChild(&_PbcERC998.CallOpts, _childContract, _childTokenId)
}

// OwnerOfChild is a free data retrieval call binding the contract method 0xeadb80b8.
//
// Solidity: function ownerOfChild(_childContract address, _childTokenId uint256) constant returns(parentTokenOwner bytes32, parentTokenId uint256)
func (_PbcERC998 *PbcERC998CallerSession) OwnerOfChild(_childContract common.Address, _childTokenId *big.Int) (struct {
	ParentTokenOwner [32]byte
	ParentTokenId    *big.Int
}, error) {
	return _PbcERC998.Contract.OwnerOfChild(&_PbcERC998.CallOpts, _childContract, _childTokenId)
}

// RootOwnerOf is a free data retrieval call binding the contract method 0x43a61a8e.
//
// Solidity: function rootOwnerOf(_tokenId uint256) constant returns(bytes32)
func (_PbcERC998 *PbcERC998Caller) RootOwnerOf(opts *bind.CallOpts, _tokenId *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "rootOwnerOf", _tokenId)
	return *ret0, err
}

// RootOwnerOf is a free data retrieval call binding the contract method 0x43a61a8e.
//
// Solidity: function rootOwnerOf(_tokenId uint256) constant returns(bytes32)
func (_PbcERC998 *PbcERC998Session) RootOwnerOf(_tokenId *big.Int) ([32]byte, error) {
	return _PbcERC998.Contract.RootOwnerOf(&_PbcERC998.CallOpts, _tokenId)
}

// RootOwnerOf is a free data retrieval call binding the contract method 0x43a61a8e.
//
// Solidity: function rootOwnerOf(_tokenId uint256) constant returns(bytes32)
func (_PbcERC998 *PbcERC998CallerSession) RootOwnerOf(_tokenId *big.Int) ([32]byte, error) {
	return _PbcERC998.Contract.RootOwnerOf(&_PbcERC998.CallOpts, _tokenId)
}

// RootOwnerOfChild is a free data retrieval call binding the contract method 0xed81cdda.
//
// Solidity: function rootOwnerOfChild(_childContract address, _childTokenId uint256) constant returns(bytes32)
func (_PbcERC998 *PbcERC998Caller) RootOwnerOfChild(opts *bind.CallOpts, _childContract common.Address, _childTokenId *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "rootOwnerOfChild", _childContract, _childTokenId)
	return *ret0, err
}

// RootOwnerOfChild is a free data retrieval call binding the contract method 0xed81cdda.
//
// Solidity: function rootOwnerOfChild(_childContract address, _childTokenId uint256) constant returns(bytes32)
func (_PbcERC998 *PbcERC998Session) RootOwnerOfChild(_childContract common.Address, _childTokenId *big.Int) ([32]byte, error) {
	return _PbcERC998.Contract.RootOwnerOfChild(&_PbcERC998.CallOpts, _childContract, _childTokenId)
}

// RootOwnerOfChild is a free data retrieval call binding the contract method 0xed81cdda.
//
// Solidity: function rootOwnerOfChild(_childContract address, _childTokenId uint256) constant returns(bytes32)
func (_PbcERC998 *PbcERC998CallerSession) RootOwnerOfChild(_childContract common.Address, _childTokenId *big.Int) ([32]byte, error) {
	return _PbcERC998.Contract.RootOwnerOfChild(&_PbcERC998.CallOpts, _childContract, _childTokenId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_PbcERC998 *PbcERC998Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_PbcERC998 *PbcERC998Session) Symbol() (string, error) {
	return _PbcERC998.Contract.Symbol(&_PbcERC998.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_PbcERC998 *PbcERC998CallerSession) Symbol() (string, error) {
	return _PbcERC998.Contract.Symbol(&_PbcERC998.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(tokenId uint256) constant returns(string)
func (_PbcERC998 *PbcERC998Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "tokenURI", tokenId)
	return *ret0, err
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(tokenId uint256) constant returns(string)
func (_PbcERC998 *PbcERC998Session) TokenURI(tokenId *big.Int) (string, error) {
	return _PbcERC998.Contract.TokenURI(&_PbcERC998.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(tokenId uint256) constant returns(string)
func (_PbcERC998 *PbcERC998CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _PbcERC998.Contract.TokenURI(&_PbcERC998.CallOpts, tokenId)
}

// TotalChildContracts is a free data retrieval call binding the contract method 0x8da7d0b5.
//
// Solidity: function totalChildContracts(_tokenId uint256) constant returns(uint256)
func (_PbcERC998 *PbcERC998Caller) TotalChildContracts(opts *bind.CallOpts, _tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "totalChildContracts", _tokenId)
	return *ret0, err
}

// TotalChildContracts is a free data retrieval call binding the contract method 0x8da7d0b5.
//
// Solidity: function totalChildContracts(_tokenId uint256) constant returns(uint256)
func (_PbcERC998 *PbcERC998Session) TotalChildContracts(_tokenId *big.Int) (*big.Int, error) {
	return _PbcERC998.Contract.TotalChildContracts(&_PbcERC998.CallOpts, _tokenId)
}

// TotalChildContracts is a free data retrieval call binding the contract method 0x8da7d0b5.
//
// Solidity: function totalChildContracts(_tokenId uint256) constant returns(uint256)
func (_PbcERC998 *PbcERC998CallerSession) TotalChildContracts(_tokenId *big.Int) (*big.Int, error) {
	return _PbcERC998.Contract.TotalChildContracts(&_PbcERC998.CallOpts, _tokenId)
}

// TotalChildTokens is a free data retrieval call binding the contract method 0x35b21ceb.
//
// Solidity: function totalChildTokens(_tokenId uint256, _childContract address) constant returns(uint256)
func (_PbcERC998 *PbcERC998Caller) TotalChildTokens(opts *bind.CallOpts, _tokenId *big.Int, _childContract common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "totalChildTokens", _tokenId, _childContract)
	return *ret0, err
}

// TotalChildTokens is a free data retrieval call binding the contract method 0x35b21ceb.
//
// Solidity: function totalChildTokens(_tokenId uint256, _childContract address) constant returns(uint256)
func (_PbcERC998 *PbcERC998Session) TotalChildTokens(_tokenId *big.Int, _childContract common.Address) (*big.Int, error) {
	return _PbcERC998.Contract.TotalChildTokens(&_PbcERC998.CallOpts, _tokenId, _childContract)
}

// TotalChildTokens is a free data retrieval call binding the contract method 0x35b21ceb.
//
// Solidity: function totalChildTokens(_tokenId uint256, _childContract address) constant returns(uint256)
func (_PbcERC998 *PbcERC998CallerSession) TotalChildTokens(_tokenId *big.Int, _childContract common.Address) (*big.Int, error) {
	return _PbcERC998.Contract.TotalChildTokens(&_PbcERC998.CallOpts, _tokenId, _childContract)
}

// TotalERC20Contracts is a free data retrieval call binding the contract method 0xa7811732.
//
// Solidity: function totalERC20Contracts(_tokenId uint256) constant returns(uint256)
func (_PbcERC998 *PbcERC998Caller) TotalERC20Contracts(opts *bind.CallOpts, _tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PbcERC998.contract.Call(opts, out, "totalERC20Contracts", _tokenId)
	return *ret0, err
}

// TotalERC20Contracts is a free data retrieval call binding the contract method 0xa7811732.
//
// Solidity: function totalERC20Contracts(_tokenId uint256) constant returns(uint256)
func (_PbcERC998 *PbcERC998Session) TotalERC20Contracts(_tokenId *big.Int) (*big.Int, error) {
	return _PbcERC998.Contract.TotalERC20Contracts(&_PbcERC998.CallOpts, _tokenId)
}

// TotalERC20Contracts is a free data retrieval call binding the contract method 0xa7811732.
//
// Solidity: function totalERC20Contracts(_tokenId uint256) constant returns(uint256)
func (_PbcERC998 *PbcERC998CallerSession) TotalERC20Contracts(_tokenId *big.Int) (*big.Int, error) {
	return _PbcERC998.Contract.TotalERC20Contracts(&_PbcERC998.CallOpts, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_approved address, _tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) Approve(opts *bind.TransactOpts, _approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "approve", _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_approved address, _tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Session) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.Approve(&_PbcERC998.TransactOpts, _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_approved address, _tokenId uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.Approve(&_PbcERC998.TransactOpts, _approved, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Session) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.Burn(&_PbcERC998.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(tokenId uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.Burn(&_PbcERC998.TransactOpts, tokenId)
}

// BurnERC20Child is a paid mutator transaction binding the contract method 0xa9218517.
//
// Solidity: function burnERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) BurnERC20Child(opts *bind.TransactOpts, parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "burnERC20Child", parentTokenId, childContract, value)
}

// BurnERC20Child is a paid mutator transaction binding the contract method 0xa9218517.
//
// Solidity: function burnERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PbcERC998 *PbcERC998Session) BurnERC20Child(parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.BurnERC20Child(&_PbcERC998.TransactOpts, parentTokenId, childContract, value)
}

// BurnERC20Child is a paid mutator transaction binding the contract method 0xa9218517.
//
// Solidity: function burnERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) BurnERC20Child(parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.BurnERC20Child(&_PbcERC998.TransactOpts, parentTokenId, childContract, value)
}

// BurnERC721Child is a paid mutator transaction binding the contract method 0xceb00e6f.
//
// Solidity: function burnERC721Child(parentTokenId uint256, childContract address, childTokenId uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) BurnERC721Child(opts *bind.TransactOpts, parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "burnERC721Child", parentTokenId, childContract, childTokenId)
}

// BurnERC721Child is a paid mutator transaction binding the contract method 0xceb00e6f.
//
// Solidity: function burnERC721Child(parentTokenId uint256, childContract address, childTokenId uint256) returns()
func (_PbcERC998 *PbcERC998Session) BurnERC721Child(parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.BurnERC721Child(&_PbcERC998.TransactOpts, parentTokenId, childContract, childTokenId)
}

// BurnERC721Child is a paid mutator transaction binding the contract method 0xceb00e6f.
//
// Solidity: function burnERC721Child(parentTokenId uint256, childContract address, childTokenId uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) BurnERC721Child(parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.BurnERC721Child(&_PbcERC998.TransactOpts, parentTokenId, childContract, childTokenId)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0x56df3db1.
//
// Solidity: function changeOwner(owner address, tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) ChangeOwner(opts *bind.TransactOpts, owner common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "changeOwner", owner, tokenId)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0x56df3db1.
//
// Solidity: function changeOwner(owner address, tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Session) ChangeOwner(owner common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.ChangeOwner(&_PbcERC998.TransactOpts, owner, tokenId)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0x56df3db1.
//
// Solidity: function changeOwner(owner address, tokenId uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) ChangeOwner(owner common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.ChangeOwner(&_PbcERC998.TransactOpts, owner, tokenId)
}

// GetChild is a paid mutator transaction binding the contract method 0xba6b5f96.
//
// Solidity: function getChild(_from address, _tokenId uint256, _childContract address, _childTokenId uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) GetChild(opts *bind.TransactOpts, _from common.Address, _tokenId *big.Int, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "getChild", _from, _tokenId, _childContract, _childTokenId)
}

// GetChild is a paid mutator transaction binding the contract method 0xba6b5f96.
//
// Solidity: function getChild(_from address, _tokenId uint256, _childContract address, _childTokenId uint256) returns()
func (_PbcERC998 *PbcERC998Session) GetChild(_from common.Address, _tokenId *big.Int, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.GetChild(&_PbcERC998.TransactOpts, _from, _tokenId, _childContract, _childTokenId)
}

// GetChild is a paid mutator transaction binding the contract method 0xba6b5f96.
//
// Solidity: function getChild(_from address, _tokenId uint256, _childContract address, _childTokenId uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) GetChild(_from common.Address, _tokenId *big.Int, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.GetChild(&_PbcERC998.TransactOpts, _from, _tokenId, _childContract, _childTokenId)
}

// GetERC20 is a paid mutator transaction binding the contract method 0x07cff6f2.
//
// Solidity: function getERC20(_from address, _tokenId uint256, _erc20Contract address, _value uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) GetERC20(opts *bind.TransactOpts, _from common.Address, _tokenId *big.Int, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "getERC20", _from, _tokenId, _erc20Contract, _value)
}

// GetERC20 is a paid mutator transaction binding the contract method 0x07cff6f2.
//
// Solidity: function getERC20(_from address, _tokenId uint256, _erc20Contract address, _value uint256) returns()
func (_PbcERC998 *PbcERC998Session) GetERC20(_from common.Address, _tokenId *big.Int, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.GetERC20(&_PbcERC998.TransactOpts, _from, _tokenId, _erc20Contract, _value)
}

// GetERC20 is a paid mutator transaction binding the contract method 0x07cff6f2.
//
// Solidity: function getERC20(_from address, _tokenId uint256, _erc20Contract address, _value uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) GetERC20(_from common.Address, _tokenId *big.Int, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.GetERC20(&_PbcERC998.TransactOpts, _from, _tokenId, _erc20Contract, _value)
}

// Lock is a paid mutator transaction binding the contract method 0xdd467064.
//
// Solidity: function lock(tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) Lock(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "lock", tokenId)
}

// Lock is a paid mutator transaction binding the contract method 0xdd467064.
//
// Solidity: function lock(tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Session) Lock(tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.Lock(&_PbcERC998.TransactOpts, tokenId)
}

// Lock is a paid mutator transaction binding the contract method 0xdd467064.
//
// Solidity: function lock(tokenId uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) Lock(tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.Lock(&_PbcERC998.TransactOpts, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0xd3fc9864.
//
// Solidity: function mint(to address, tokenId uint256, uri string) returns()
func (_PbcERC998 *PbcERC998Transactor) Mint(opts *bind.TransactOpts, to common.Address, tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "mint", to, tokenId, uri)
}

// Mint is a paid mutator transaction binding the contract method 0xd3fc9864.
//
// Solidity: function mint(to address, tokenId uint256, uri string) returns()
func (_PbcERC998 *PbcERC998Session) Mint(to common.Address, tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PbcERC998.Contract.Mint(&_PbcERC998.TransactOpts, to, tokenId, uri)
}

// Mint is a paid mutator transaction binding the contract method 0xd3fc9864.
//
// Solidity: function mint(to address, tokenId uint256, uri string) returns()
func (_PbcERC998 *PbcERC998TransactorSession) Mint(to common.Address, tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PbcERC998.Contract.Mint(&_PbcERC998.TransactOpts, to, tokenId, uri)
}

// MintERC20Child is a paid mutator transaction binding the contract method 0xcc12e613.
//
// Solidity: function mintERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) MintERC20Child(opts *bind.TransactOpts, parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "mintERC20Child", parentTokenId, childContract, value)
}

// MintERC20Child is a paid mutator transaction binding the contract method 0xcc12e613.
//
// Solidity: function mintERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PbcERC998 *PbcERC998Session) MintERC20Child(parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.MintERC20Child(&_PbcERC998.TransactOpts, parentTokenId, childContract, value)
}

// MintERC20Child is a paid mutator transaction binding the contract method 0xcc12e613.
//
// Solidity: function mintERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) MintERC20Child(parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.MintERC20Child(&_PbcERC998.TransactOpts, parentTokenId, childContract, value)
}

// MintERC721Child is a paid mutator transaction binding the contract method 0x5061c1ed.
//
// Solidity: function mintERC721Child(parentTokenId uint256, childContract address, childTokenId uint256, uri string) returns()
func (_PbcERC998 *PbcERC998Transactor) MintERC721Child(opts *bind.TransactOpts, parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "mintERC721Child", parentTokenId, childContract, childTokenId, uri)
}

// MintERC721Child is a paid mutator transaction binding the contract method 0x5061c1ed.
//
// Solidity: function mintERC721Child(parentTokenId uint256, childContract address, childTokenId uint256, uri string) returns()
func (_PbcERC998 *PbcERC998Session) MintERC721Child(parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PbcERC998.Contract.MintERC721Child(&_PbcERC998.TransactOpts, parentTokenId, childContract, childTokenId, uri)
}

// MintERC721Child is a paid mutator transaction binding the contract method 0x5061c1ed.
//
// Solidity: function mintERC721Child(parentTokenId uint256, childContract address, childTokenId uint256, uri string) returns()
func (_PbcERC998 *PbcERC998TransactorSession) MintERC721Child(parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PbcERC998.Contract.MintERC721Child(&_PbcERC998.TransactOpts, parentTokenId, childContract, childTokenId, uri)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0xf0b9e5ba.
//
// Solidity: function onERC721Received(_from address, _childTokenId uint256, _data bytes) returns(bytes4)
func (_PbcERC998 *PbcERC998Transactor) OnERC721Received(opts *bind.TransactOpts, _from common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "onERC721Received", _from, _childTokenId, _data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0xf0b9e5ba.
//
// Solidity: function onERC721Received(_from address, _childTokenId uint256, _data bytes) returns(bytes4)
func (_PbcERC998 *PbcERC998Session) OnERC721Received(_from common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PbcERC998.Contract.OnERC721Received(&_PbcERC998.TransactOpts, _from, _childTokenId, _data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0xf0b9e5ba.
//
// Solidity: function onERC721Received(_from address, _childTokenId uint256, _data bytes) returns(bytes4)
func (_PbcERC998 *PbcERC998TransactorSession) OnERC721Received(_from common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PbcERC998.Contract.OnERC721Received(&_PbcERC998.TransactOpts, _from, _childTokenId, _data)
}

// SafeTransferChild is a paid mutator transaction binding the contract method 0x8d81f51e.
//
// Solidity: function safeTransferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256, _data bytes) returns()
func (_PbcERC998 *PbcERC998Transactor) SafeTransferChild(opts *bind.TransactOpts, _fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "safeTransferChild", _fromTokenId, _to, _childContract, _childTokenId, _data)
}

// SafeTransferChild is a paid mutator transaction binding the contract method 0x8d81f51e.
//
// Solidity: function safeTransferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256, _data bytes) returns()
func (_PbcERC998 *PbcERC998Session) SafeTransferChild(_fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PbcERC998.Contract.SafeTransferChild(&_PbcERC998.TransactOpts, _fromTokenId, _to, _childContract, _childTokenId, _data)
}

// SafeTransferChild is a paid mutator transaction binding the contract method 0x8d81f51e.
//
// Solidity: function safeTransferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256, _data bytes) returns()
func (_PbcERC998 *PbcERC998TransactorSession) SafeTransferChild(_fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PbcERC998.Contract.SafeTransferChild(&_PbcERC998.TransactOpts, _fromTokenId, _to, _childContract, _childTokenId, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _data bytes) returns()
func (_PbcERC998 *PbcERC998Transactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "safeTransferFrom", _from, _to, _tokenId, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _data bytes) returns()
func (_PbcERC998 *PbcERC998Session) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PbcERC998.Contract.SafeTransferFrom(&_PbcERC998.TransactOpts, _from, _to, _tokenId, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _data bytes) returns()
func (_PbcERC998 *PbcERC998TransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PbcERC998.Contract.SafeTransferFrom(&_PbcERC998.TransactOpts, _from, _to, _tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_PbcERC998 *PbcERC998Transactor) SetApprovalForAll(opts *bind.TransactOpts, _operator common.Address, _approved bool) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "setApprovalForAll", _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_PbcERC998 *PbcERC998Session) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _PbcERC998.Contract.SetApprovalForAll(&_PbcERC998.TransactOpts, _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_PbcERC998 *PbcERC998TransactorSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _PbcERC998.Contract.SetApprovalForAll(&_PbcERC998.TransactOpts, _operator, _approved)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(tokenId uint256, uri string) returns()
func (_PbcERC998 *PbcERC998Transactor) SetTokenURI(opts *bind.TransactOpts, tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "setTokenURI", tokenId, uri)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(tokenId uint256, uri string) returns()
func (_PbcERC998 *PbcERC998Session) SetTokenURI(tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PbcERC998.Contract.SetTokenURI(&_PbcERC998.TransactOpts, tokenId, uri)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(tokenId uint256, uri string) returns()
func (_PbcERC998 *PbcERC998TransactorSession) SetTokenURI(tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PbcERC998.Contract.SetTokenURI(&_PbcERC998.TransactOpts, tokenId, uri)
}

// TransferChild is a paid mutator transaction binding the contract method 0xbef44f18.
//
// Solidity: function transferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) TransferChild(opts *bind.TransactOpts, _fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "transferChild", _fromTokenId, _to, _childContract, _childTokenId)
}

// TransferChild is a paid mutator transaction binding the contract method 0xbef44f18.
//
// Solidity: function transferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256) returns()
func (_PbcERC998 *PbcERC998Session) TransferChild(_fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.TransferChild(&_PbcERC998.TransactOpts, _fromTokenId, _to, _childContract, _childTokenId)
}

// TransferChild is a paid mutator transaction binding the contract method 0xbef44f18.
//
// Solidity: function transferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) TransferChild(_fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.TransferChild(&_PbcERC998.TransactOpts, _fromTokenId, _to, _childContract, _childTokenId)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x830ef41b.
//
// Solidity: function transferERC20(_tokenId uint256, _to address, _erc20Contract address, _value uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) TransferERC20(opts *bind.TransactOpts, _tokenId *big.Int, _to common.Address, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "transferERC20", _tokenId, _to, _erc20Contract, _value)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x830ef41b.
//
// Solidity: function transferERC20(_tokenId uint256, _to address, _erc20Contract address, _value uint256) returns()
func (_PbcERC998 *PbcERC998Session) TransferERC20(_tokenId *big.Int, _to common.Address, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.TransferERC20(&_PbcERC998.TransactOpts, _tokenId, _to, _erc20Contract, _value)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x830ef41b.
//
// Solidity: function transferERC20(_tokenId uint256, _to address, _erc20Contract address, _value uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) TransferERC20(_tokenId *big.Int, _to common.Address, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.TransferERC20(&_PbcERC998.TransactOpts, _tokenId, _to, _erc20Contract, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "transferFrom", _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Session) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.TransferFrom(&_PbcERC998.TransactOpts, _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.TransferFrom(&_PbcERC998.TransactOpts, _from, _to, _tokenId)
}

// Unlock is a paid mutator transaction binding the contract method 0x6198e339.
//
// Solidity: function unlock(tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Transactor) Unlock(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.contract.Transact(opts, "unlock", tokenId)
}

// Unlock is a paid mutator transaction binding the contract method 0x6198e339.
//
// Solidity: function unlock(tokenId uint256) returns()
func (_PbcERC998 *PbcERC998Session) Unlock(tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.Unlock(&_PbcERC998.TransactOpts, tokenId)
}

// Unlock is a paid mutator transaction binding the contract method 0x6198e339.
//
// Solidity: function unlock(tokenId uint256) returns()
func (_PbcERC998 *PbcERC998TransactorSession) Unlock(tokenId *big.Int) (*types.Transaction, error) {
	return _PbcERC998.Contract.Unlock(&_PbcERC998.TransactOpts, tokenId)
}

// PbcERC998ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the PbcERC998 contract.
type PbcERC998ApprovalIterator struct {
	Event *PbcERC998Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PbcERC998ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PbcERC998Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PbcERC998Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PbcERC998ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PbcERC998ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PbcERC998Approval represents a Approval event raised by the PbcERC998 contract.
type PbcERC998Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, approved indexed address, tokenId indexed uint256)
func (_PbcERC998 *PbcERC998Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*PbcERC998ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PbcERC998.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &PbcERC998ApprovalIterator{contract: _PbcERC998.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, approved indexed address, tokenId indexed uint256)
func (_PbcERC998 *PbcERC998Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PbcERC998Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PbcERC998.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PbcERC998Approval)
				if err := _PbcERC998.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PbcERC998ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the PbcERC998 contract.
type PbcERC998ApprovalForAllIterator struct {
	Event *PbcERC998ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PbcERC998ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PbcERC998ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PbcERC998ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PbcERC998ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PbcERC998ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PbcERC998ApprovalForAll represents a ApprovalForAll event raised by the PbcERC998 contract.
type PbcERC998ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(owner indexed address, operator indexed address, approved bool)
func (_PbcERC998 *PbcERC998Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*PbcERC998ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PbcERC998.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PbcERC998ApprovalForAllIterator{contract: _PbcERC998.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(owner indexed address, operator indexed address, approved bool)
func (_PbcERC998 *PbcERC998Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *PbcERC998ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PbcERC998.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PbcERC998ApprovalForAll)
				if err := _PbcERC998.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PbcERC998LockIterator is returned from FilterLock and is used to iterate over the raw logs and unpacked data for Lock events raised by the PbcERC998 contract.
type PbcERC998LockIterator struct {
	Event *PbcERC998Lock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PbcERC998LockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PbcERC998Lock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PbcERC998Lock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PbcERC998LockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PbcERC998LockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PbcERC998Lock represents a Lock event raised by the PbcERC998 contract.
type PbcERC998Lock struct {
	Operator common.Address
	Owner    common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLock is a free log retrieval operation binding the contract event 0xec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3.
//
// Solidity: e Lock(operator address, owner address, tokenId uint256)
func (_PbcERC998 *PbcERC998Filterer) FilterLock(opts *bind.FilterOpts) (*PbcERC998LockIterator, error) {

	logs, sub, err := _PbcERC998.contract.FilterLogs(opts, "Lock")
	if err != nil {
		return nil, err
	}
	return &PbcERC998LockIterator{contract: _PbcERC998.contract, event: "Lock", logs: logs, sub: sub}, nil
}

// WatchLock is a free log subscription operation binding the contract event 0xec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3.
//
// Solidity: e Lock(operator address, owner address, tokenId uint256)
func (_PbcERC998 *PbcERC998Filterer) WatchLock(opts *bind.WatchOpts, sink chan<- *PbcERC998Lock) (event.Subscription, error) {

	logs, sub, err := _PbcERC998.contract.WatchLogs(opts, "Lock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PbcERC998Lock)
				if err := _PbcERC998.contract.UnpackLog(event, "Lock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PbcERC998ReceivedChildIterator is returned from FilterReceivedChild and is used to iterate over the raw logs and unpacked data for ReceivedChild events raised by the PbcERC998 contract.
type PbcERC998ReceivedChildIterator struct {
	Event *PbcERC998ReceivedChild // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PbcERC998ReceivedChildIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PbcERC998ReceivedChild)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PbcERC998ReceivedChild)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PbcERC998ReceivedChildIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PbcERC998ReceivedChildIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PbcERC998ReceivedChild represents a ReceivedChild event raised by the PbcERC998 contract.
type PbcERC998ReceivedChild struct {
	From          common.Address
	TokenId       *big.Int
	ChildContract common.Address
	ChildTokenId  *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterReceivedChild is a free log retrieval operation binding the contract event 0x0371ddf2288ad1ba92626a7e31c86a9d006e592cfe57d7d946ef08b13457c08b.
//
// Solidity: e ReceivedChild(_from indexed address, _tokenId indexed uint256, _childContract indexed address, _childTokenId uint256)
func (_PbcERC998 *PbcERC998Filterer) FilterReceivedChild(opts *bind.FilterOpts, _from []common.Address, _tokenId []*big.Int, _childContract []common.Address) (*PbcERC998ReceivedChildIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _childContractRule []interface{}
	for _, _childContractItem := range _childContract {
		_childContractRule = append(_childContractRule, _childContractItem)
	}

	logs, sub, err := _PbcERC998.contract.FilterLogs(opts, "ReceivedChild", _fromRule, _tokenIdRule, _childContractRule)
	if err != nil {
		return nil, err
	}
	return &PbcERC998ReceivedChildIterator{contract: _PbcERC998.contract, event: "ReceivedChild", logs: logs, sub: sub}, nil
}

// WatchReceivedChild is a free log subscription operation binding the contract event 0x0371ddf2288ad1ba92626a7e31c86a9d006e592cfe57d7d946ef08b13457c08b.
//
// Solidity: e ReceivedChild(_from indexed address, _tokenId indexed uint256, _childContract indexed address, _childTokenId uint256)
func (_PbcERC998 *PbcERC998Filterer) WatchReceivedChild(opts *bind.WatchOpts, sink chan<- *PbcERC998ReceivedChild, _from []common.Address, _tokenId []*big.Int, _childContract []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _childContractRule []interface{}
	for _, _childContractItem := range _childContract {
		_childContractRule = append(_childContractRule, _childContractItem)
	}

	logs, sub, err := _PbcERC998.contract.WatchLogs(opts, "ReceivedChild", _fromRule, _tokenIdRule, _childContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PbcERC998ReceivedChild)
				if err := _PbcERC998.contract.UnpackLog(event, "ReceivedChild", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PbcERC998ReceivedERC20Iterator is returned from FilterReceivedERC20 and is used to iterate over the raw logs and unpacked data for ReceivedERC20 events raised by the PbcERC998 contract.
type PbcERC998ReceivedERC20Iterator struct {
	Event *PbcERC998ReceivedERC20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PbcERC998ReceivedERC20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PbcERC998ReceivedERC20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PbcERC998ReceivedERC20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PbcERC998ReceivedERC20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PbcERC998ReceivedERC20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PbcERC998ReceivedERC20 represents a ReceivedERC20 event raised by the PbcERC998 contract.
type PbcERC998ReceivedERC20 struct {
	From          common.Address
	TokenId       *big.Int
	Erc20Contract common.Address
	Value         *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterReceivedERC20 is a free log retrieval operation binding the contract event 0x684ce28ace37552c6bfb98b7cceda8ed55327078eafb5dfb31218e0856382763.
//
// Solidity: e ReceivedERC20(_from indexed address, _tokenId indexed uint256, _erc20Contract indexed address, _value uint256)
func (_PbcERC998 *PbcERC998Filterer) FilterReceivedERC20(opts *bind.FilterOpts, _from []common.Address, _tokenId []*big.Int, _erc20Contract []common.Address) (*PbcERC998ReceivedERC20Iterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _erc20ContractRule []interface{}
	for _, _erc20ContractItem := range _erc20Contract {
		_erc20ContractRule = append(_erc20ContractRule, _erc20ContractItem)
	}

	logs, sub, err := _PbcERC998.contract.FilterLogs(opts, "ReceivedERC20", _fromRule, _tokenIdRule, _erc20ContractRule)
	if err != nil {
		return nil, err
	}
	return &PbcERC998ReceivedERC20Iterator{contract: _PbcERC998.contract, event: "ReceivedERC20", logs: logs, sub: sub}, nil
}

// WatchReceivedERC20 is a free log subscription operation binding the contract event 0x684ce28ace37552c6bfb98b7cceda8ed55327078eafb5dfb31218e0856382763.
//
// Solidity: e ReceivedERC20(_from indexed address, _tokenId indexed uint256, _erc20Contract indexed address, _value uint256)
func (_PbcERC998 *PbcERC998Filterer) WatchReceivedERC20(opts *bind.WatchOpts, sink chan<- *PbcERC998ReceivedERC20, _from []common.Address, _tokenId []*big.Int, _erc20Contract []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _erc20ContractRule []interface{}
	for _, _erc20ContractItem := range _erc20Contract {
		_erc20ContractRule = append(_erc20ContractRule, _erc20ContractItem)
	}

	logs, sub, err := _PbcERC998.contract.WatchLogs(opts, "ReceivedERC20", _fromRule, _tokenIdRule, _erc20ContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PbcERC998ReceivedERC20)
				if err := _PbcERC998.contract.UnpackLog(event, "ReceivedERC20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PbcERC998TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the PbcERC998 contract.
type PbcERC998TransferIterator struct {
	Event *PbcERC998Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PbcERC998TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PbcERC998Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PbcERC998Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PbcERC998TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PbcERC998TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PbcERC998Transfer represents a Transfer event raised by the PbcERC998 contract.
type PbcERC998Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, tokenId indexed uint256)
func (_PbcERC998 *PbcERC998Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*PbcERC998TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PbcERC998.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &PbcERC998TransferIterator{contract: _PbcERC998.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, tokenId indexed uint256)
func (_PbcERC998 *PbcERC998Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PbcERC998Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PbcERC998.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PbcERC998Transfer)
				if err := _PbcERC998.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PbcERC998TransferChildIterator is returned from FilterTransferChild and is used to iterate over the raw logs and unpacked data for TransferChild events raised by the PbcERC998 contract.
type PbcERC998TransferChildIterator struct {
	Event *PbcERC998TransferChild // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PbcERC998TransferChildIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PbcERC998TransferChild)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PbcERC998TransferChild)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PbcERC998TransferChildIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PbcERC998TransferChildIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PbcERC998TransferChild represents a TransferChild event raised by the PbcERC998 contract.
type PbcERC998TransferChild struct {
	TokenId       *big.Int
	To            common.Address
	ChildContract common.Address
	ChildTokenId  *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTransferChild is a free log retrieval operation binding the contract event 0x0ef52e516fb5aec15a5d3587e5480481b702b26db93c8430eca78b61990fd3f6.
//
// Solidity: e TransferChild(tokenId indexed uint256, _to indexed address, _childContract indexed address, _childTokenId uint256)
func (_PbcERC998 *PbcERC998Filterer) FilterTransferChild(opts *bind.FilterOpts, tokenId []*big.Int, _to []common.Address, _childContract []common.Address) (*PbcERC998TransferChildIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _childContractRule []interface{}
	for _, _childContractItem := range _childContract {
		_childContractRule = append(_childContractRule, _childContractItem)
	}

	logs, sub, err := _PbcERC998.contract.FilterLogs(opts, "TransferChild", tokenIdRule, _toRule, _childContractRule)
	if err != nil {
		return nil, err
	}
	return &PbcERC998TransferChildIterator{contract: _PbcERC998.contract, event: "TransferChild", logs: logs, sub: sub}, nil
}

// WatchTransferChild is a free log subscription operation binding the contract event 0x0ef52e516fb5aec15a5d3587e5480481b702b26db93c8430eca78b61990fd3f6.
//
// Solidity: e TransferChild(tokenId indexed uint256, _to indexed address, _childContract indexed address, _childTokenId uint256)
func (_PbcERC998 *PbcERC998Filterer) WatchTransferChild(opts *bind.WatchOpts, sink chan<- *PbcERC998TransferChild, tokenId []*big.Int, _to []common.Address, _childContract []common.Address) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _childContractRule []interface{}
	for _, _childContractItem := range _childContract {
		_childContractRule = append(_childContractRule, _childContractItem)
	}

	logs, sub, err := _PbcERC998.contract.WatchLogs(opts, "TransferChild", tokenIdRule, _toRule, _childContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PbcERC998TransferChild)
				if err := _PbcERC998.contract.UnpackLog(event, "TransferChild", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PbcERC998TransferERC20Iterator is returned from FilterTransferERC20 and is used to iterate over the raw logs and unpacked data for TransferERC20 events raised by the PbcERC998 contract.
type PbcERC998TransferERC20Iterator struct {
	Event *PbcERC998TransferERC20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PbcERC998TransferERC20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PbcERC998TransferERC20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PbcERC998TransferERC20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PbcERC998TransferERC20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PbcERC998TransferERC20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PbcERC998TransferERC20 represents a TransferERC20 event raised by the PbcERC998 contract.
type PbcERC998TransferERC20 struct {
	TokenId       *big.Int
	To            common.Address
	Erc20Contract common.Address
	Value         *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTransferERC20 is a free log retrieval operation binding the contract event 0xa8352277873fc0d2b233b8127433da351a4164fa701ed6ff79655694222932c4.
//
// Solidity: e TransferERC20(_tokenId indexed uint256, _to indexed address, _erc20Contract indexed address, _value uint256)
func (_PbcERC998 *PbcERC998Filterer) FilterTransferERC20(opts *bind.FilterOpts, _tokenId []*big.Int, _to []common.Address, _erc20Contract []common.Address) (*PbcERC998TransferERC20Iterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _erc20ContractRule []interface{}
	for _, _erc20ContractItem := range _erc20Contract {
		_erc20ContractRule = append(_erc20ContractRule, _erc20ContractItem)
	}

	logs, sub, err := _PbcERC998.contract.FilterLogs(opts, "TransferERC20", _tokenIdRule, _toRule, _erc20ContractRule)
	if err != nil {
		return nil, err
	}
	return &PbcERC998TransferERC20Iterator{contract: _PbcERC998.contract, event: "TransferERC20", logs: logs, sub: sub}, nil
}

// WatchTransferERC20 is a free log subscription operation binding the contract event 0xa8352277873fc0d2b233b8127433da351a4164fa701ed6ff79655694222932c4.
//
// Solidity: e TransferERC20(_tokenId indexed uint256, _to indexed address, _erc20Contract indexed address, _value uint256)
func (_PbcERC998 *PbcERC998Filterer) WatchTransferERC20(opts *bind.WatchOpts, sink chan<- *PbcERC998TransferERC20, _tokenId []*big.Int, _to []common.Address, _erc20Contract []common.Address) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _erc20ContractRule []interface{}
	for _, _erc20ContractItem := range _erc20Contract {
		_erc20ContractRule = append(_erc20ContractRule, _erc20ContractItem)
	}

	logs, sub, err := _PbcERC998.contract.WatchLogs(opts, "TransferERC20", _tokenIdRule, _toRule, _erc20ContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PbcERC998TransferERC20)
				if err := _PbcERC998.contract.UnpackLog(event, "TransferERC20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PbcERC998UnlockIterator is returned from FilterUnlock and is used to iterate over the raw logs and unpacked data for Unlock events raised by the PbcERC998 contract.
type PbcERC998UnlockIterator struct {
	Event *PbcERC998Unlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PbcERC998UnlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PbcERC998Unlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PbcERC998Unlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PbcERC998UnlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PbcERC998UnlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PbcERC998Unlock represents a Unlock event raised by the PbcERC998 contract.
type PbcERC998Unlock struct {
	Operator common.Address
	Owner    common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUnlock is a free log retrieval operation binding the contract event 0xc1c90b8e0705b212262c0dbd7580efe1862c2f185bf96899226f7596beb2db09.
//
// Solidity: e Unlock(operator address, owner address, tokenId uint256)
func (_PbcERC998 *PbcERC998Filterer) FilterUnlock(opts *bind.FilterOpts) (*PbcERC998UnlockIterator, error) {

	logs, sub, err := _PbcERC998.contract.FilterLogs(opts, "Unlock")
	if err != nil {
		return nil, err
	}
	return &PbcERC998UnlockIterator{contract: _PbcERC998.contract, event: "Unlock", logs: logs, sub: sub}, nil
}

// WatchUnlock is a free log subscription operation binding the contract event 0xc1c90b8e0705b212262c0dbd7580efe1862c2f185bf96899226f7596beb2db09.
//
// Solidity: e Unlock(operator address, owner address, tokenId uint256)
func (_PbcERC998 *PbcERC998Filterer) WatchUnlock(opts *bind.WatchOpts, sink chan<- *PbcERC998Unlock) (event.Subscription, error) {

	logs, sub, err := _PbcERC998.contract.WatchLogs(opts, "Unlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PbcERC998Unlock)
				if err := _PbcERC998.contract.UnpackLog(event, "Unlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
