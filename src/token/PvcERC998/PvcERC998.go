// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PvcERC998

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PvcERC998ABI is the input ABI used to generate the binding from.
const PvcERC998ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childContractByIndex\",\"outputs\":[{\"name\":\"childContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childTokenByIndex\",\"outputs\":[{\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_childContract\",\"type\":\"address\"}],\"name\":\"totalChildTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"childContract\",\"type\":\"address\"},{\"name\":\"childTokenId\",\"type\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintERC721Child\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"childExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"erc20ContractByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalChildContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalERC20Contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"childContract\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnERC20Child\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"getChild\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"transferChild\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"childContract\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintERC20Child\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"childContract\",\"type\":\"address\"},{\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"name\":\"burnERC721Child\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_erc20Contract\",\"type\":\"address\"}],\"name\":\"balanceOfERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOfChild\",\"outputs\":[{\"name\":\"parentTokenOwner\",\"type\":\"bytes32\"},{\"name\":\"parentTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_childContract\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOfChild\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceivedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ReceivedChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"TransferChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"}]"

// PvcERC998Bin is the compiled bytecode used for deploying new contracts.
const PvcERC998Bin = `608060405260006001553480156200001657600080fd5b50604051620073d4380380620073d4833981018060405260408110156200003c57600080fd5b8101908080516401000000008111156200005557600080fd5b828101905060208101848111156200006c57600080fd5b81518560018202830111640100000000821117156200008a57600080fd5b50509291906020018051640100000000811115620000a757600080fd5b82810190506020810184811115620000be57600080fd5b8151856001820283011164010000000082111715620000dc57600080fd5b50509291905050508160069080519060200190620000fc9291906200011e565b508060079080519060200190620001159291906200011e565b505050620001cd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016157805160ff191683800117855562000192565b8280016001018555821562000192579182015b828111156200019157825182559160200191906001019062000174565b5b509050620001a19190620001a5565b5090565b620001ca91905b80821115620001c6576000816000905550600101620001ac565b5090565b90565b6171f780620001dd6000396000f3fe608060405234801561001057600080fd5b506004361061027b576000357c010000000000000000000000000000000000000000000000000000000090048063830ef41b11610163578063c87b56dd116100e0578063e226ed22116100a4578063e226ed2214611401578063e985e9c514611463578063eadb80b8146114df578063ed81cdda14611548578063f0b9e5ba146115aa578063f6aacfb1146116e15761027b565b8063c87b56dd14611197578063cc12e6131461123e578063ceb00e6f14611296578063d3fc9864146112ee578063dd467064146113d35761027b565b8063a781173211610127578063a781173214610f08578063a921851714610f4a578063b88d4fde14610fa2578063ba6b5f96146110a7578063bef44f181461111f5761027b565b8063830ef41b14610c6c5780638d81f51e14610ce45780638da7d0b514610df357806395d89b4114610e35578063a22cb46514610eb85761027b565b806335b21ceb116101fc5780635680a3ad116101c05780635680a3ad14610a4c57806356df3db114610ab25780636198e33914610b00578063627c81ff14610b2e5780636352211e14610ba657806370a0823114610c145761027b565b806335b21ceb1461081d57806342842e0e1461087f57806342966c68146108ed57806343a61a8e1461091b5780635061c1ed1461095d5761027b565b8063150b7a0211610243578063150b7a02146104af578063160b01a114610606578063162094c4146106725780631d98f3c51461073757806323b872dd146107af5761027b565b806306fdde031461028057806307cff6f214610303578063081812fc1461037b578063095ea7b3146103e95780630d5a621b14610437575b600080fd5b610288611727565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102c85780820151818401526020810190506102ad565b50505050905090810190601f1680156102f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103796004803603608081101561031957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117c9565b005b6103a76004803603602081101561039157600080fd5b8101908080359060200190929190505050611bfa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610435600480360360408110156103ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c91565b005b61046d6004803603604081101561044d57600080fd5b810190808035906020019092919080359060200190929190505050611e68565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105b2600480360360808110156104c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561052c57600080fd5b82018360208201111561053e57600080fd5b8035906020019184600183028401116401000000008311171561056057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f2d565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61065c6004803603606081101561061c57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612175565b6040518082815260200191505060405180910390f35b6107356004803603604081101561068857600080fd5b8101908080359060200190929190803590602001906401000000008111156106af57600080fd5b8201836020820111156106c157600080fd5b803590602001918460018302840111640100000000831117156106e357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612295565b005b6107ad6004803603608081101561074d57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122d5565b005b61081b600480360360608110156107c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506126e5565b005b6108696004803603604081101561083357600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126f5565b6040518082815260200191505060405180910390f35b6108eb6004803603606081101561089557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612753565b005b6109196004803603602081101561090357600080fd5b8101908080359060200190929190505050612922565b005b6109476004803603602081101561093157600080fd5b810190808035906020019092919050505061292e565b6040518082815260200191505060405180910390f35b610a4a6004803603608081101561097357600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156109c457600080fd5b8201836020820111156109d657600080fd5b803590602001918460018302840111640100000000831117156109f857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612942565b005b610a9860048036036040811015610a6257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a82565b604051808215151515815260200191505060405180910390f35b610afe60048036036040811015610ac857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612b47565b005b610b2c60048036036020811015610b1657600080fd5b8101908080359060200190929190505050612b9d565b005b610b6460048036036040811015610b4457600080fd5b810190808035906020019092919080359060200190929190505050612de2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610bd260048036036020811015610bbc57600080fd5b8101908080359060200190929190505050612ea7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610c5660048036036020811015610c2a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f25565b6040518082815260200191505060405180910390f35b610ce260048036036080811015610c8257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612fa9565b005b610df1600480360360a0811015610cfa57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610d6b57600080fd5b820183602082011115610d7d57600080fd5b80359060200191846001830284011164010000000083111715610d9f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061333d565b005b610e1f60048036036020811015610e0957600080fd5b81019080803590602001909291905050506137bb565b6040518082815260200191505060405180910390f35b610e3d6137db565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e7d578082015181840152602081019050610e62565b50505050905090810190601f168015610eaa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610f0660048036036040811015610ece57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061387d565b005b610f3460048036036020811015610f1e57600080fd5b81019080803590602001909291905050506139ba565b6040518082815260200191505060405180910390f35b610fa060048036036060811015610f6057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506139da565b005b6110a560048036036080811015610fb857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561101f57600080fd5b82018360208201111561103157600080fd5b8035906020019184600183028401116401000000008311171561105357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613aa5565b005b61111d600480360360808110156110bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613cce565b005b6111956004803603608081101561113557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613ff5565b005b6111c3600480360360208110156111ad57600080fd5b81019080803590602001909291905050506144c0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156112035780820151818401526020810190506111e8565b50505050905090810190601f1680156112305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6112946004803603606081101561125457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614589565b005b6112ec600480360360608110156112ac57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061465b565b005b6113d16004803603606081101561130457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561134b57600080fd5b82018360208201111561135d57600080fd5b8035906020019184600183028401116401000000008311171561137f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506146f2565b005b6113ff600480360360208110156113e957600080fd5b8101908080359060200190929190505050614736565b005b61144d6004803603604081101561141757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061497c565b6040518082815260200191505060405180910390f35b6114c56004803603604081101561147957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506149d7565b604051808215151515815260200191505060405180910390f35b61152b600480360360408110156114f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614ae2565b604051808381526020018281526020019250505060405180910390f35b6115946004803603604081101561155e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614c5c565b6040518082815260200191505060405180910390f35b61168d600480360360608110156115c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561160757600080fd5b82018360208201111561161957600080fd5b8035906020019184600183028401116401000000008311171561163b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050614edf565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61170d600480360360208110156116f757600080fd5b81019080803590602001909291905050506150ea565b604051808215151515815260200191505060405180910390f35b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117bf5780601f10611794576101008083540402835291602001916117bf565b820191906000526020600020905b8154815290600101906020018083116117a257829003601f168201915b5050505050905090565b60003373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161490508015156119ec576000606063dd62ed3e8733604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051602081830303815290604052907c0100000000000000000000000000000000000000000000000000000000026020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000602082835160208501895afa905080156118f757815192505b80151561196c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f63616c6c20746f20616c6c6f77616e6365206661696c6564000000000000000081525060200191505060405180910390fd5b8483101515156119e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f56616c75652067726561746572207468616e2072656d61696e696e670000000081525060200191505060405180910390fd5b600193505050505b801515611a61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6e6f7420616c6c6f77656420746f20676574455243323000000000000000000081525060200191505060405180910390fd5b611a6d85858585615113565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd8630856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611b4457600080fd5b505af1158015611b58573d6000803e3d6000fd5b505050506040513d6020811015611b6e57600080fd5b81019080805190602001909291905050501515611bf3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4552433230207472616e73666572206661696c65642e0000000000000000000081525060200191505060405180910390fd5b5050505050565b600080611c068361292e565b6c0100000000000000000000000090049050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000611c9c8261292e565b6c01000000000000000000000000900490503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480611d6e5750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611d7957600080fd5b82600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000600960008481526020019081526020016000208054905082101515611eda576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806170a76039913960400191505060405180910390fd5b6009600084815260200190815260200160002082815481101515611efa57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000808251111515611f8a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806171866046913960600191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515611fc657600080fd5b600060a4359050602083511015611fee5760088351026101000381908060020a820491505090505b611ffa85823387615406565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561207f57600080fd5b505afa158015612093573d6000803e3d6000fd5b505050506040513d60208110156120a957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151515612146576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4368696c6420746f6b656e206e6f74206f776e65642e0000000000000000000081525060200191505060405180910390fd5b63150b7a027c010000000000000000000000000000000000000000000000000000000002915050949350505050565b6000600b600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905082101515612224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180617107603f913960400191505060405180910390fd5b600b600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561228157fe5b906000526020600020015490509392505050565b61229e82615883565b15156122a957600080fd5b806008600084815260200190815260200160002090805190602001906122d0929190616f36565b505050565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020549050600081118061239a57506000600c600083815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054115b15156123a557600080fd5b84811415156123b357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156123ef57600080fd5b60006123fa8261292e565b6c01000000000000000000000000900490503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806124cc5750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b8061257257503373ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561257d57600080fd5b6125888285856158f5565b8373ffffffffffffffffffffffffffffffffffffffff166342842e0e3087866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561265f57600080fd5b505af1158015612673573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16837f0ef52e516fb5aec15a5d3587e5480481b702b26db93c8430eca78b61990fd3f6866040518082815260200191505060405180910390a4505050505050565b6126f0838383615edc565b505050565b6000600b600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905092915050565b61275e838383615edc565b61277d8273ffffffffffffffffffffffffffffffffffffffff166165fb565b1561291d5760008273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200180602001828103825260008152602001602001945050505050602060405180830381600087803b15801561286f57600080fd5b505af1158015612883573d6000803e3d6000fd5b505050506040513d602081101561289957600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561291b57600080fd5b505b505050565b61292b8161660e565b50565b600061293b600083614c5c565b9050919050565b8273ffffffffffffffffffffffffffffffffffffffff1663d3fc98643084846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612a045780820151818401526020810190506129e9565b50505050905090810190601f168015612a315780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015612a5257600080fd5b505af1158015612a66573d6000803e3d6000fd5b505050506000339050612a7b81868686615406565b5050505050565b600080600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205490506000600c600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054141591505092915050565b816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600033905060006002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f746f6b656e206e6f74206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b60008084815260200190815260200160002060009054906101000a900460ff161515612d13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f746f6b656e20616c726561647920756e6c6f636b65640000000000000000000081525060200191505060405180910390fd5b600080600085815260200190815260200160002060006101000a81548160ff0219169083151502179055507fc1c90b8e0705b212262c0dbd7580efe1862c2f185bf96899226f7596beb2db09828285604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000600e60008481526020019081526020016000208054905082101515612e54576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806170a76039913960400191505060405180910390fd5b600e600084815260200190815260200160002082815481101515612e7457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612f1c57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612f6257600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612fe557600080fd5b6000612ff08561292e565b6c01000000000000000000000000900490503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806130c25750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b8061316857503373ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561317357600080fd5b61317e858484616623565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561322157600080fd5b505af1158015613235573d6000803e3d6000fd5b505050506040513d602081101561324b57600080fd5b810190808051906020019092919050505015156132d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4552433230207472616e73666572206661696c65642e0000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16867fa8352277873fc0d2b233b8127433da351a4164fa701ed6ff79655694222932c4856040518082815260200191505060405180910390a45050505050565b6000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020549050600081118061340257506000600c600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054115b151561340d57600080fd5b858114151561341b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561345757600080fd5b60006134628261292e565b6c01000000000000000000000000900490503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806135345750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806135da57503373ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15156135e557600080fd5b6135f08286866158f5565b8473ffffffffffffffffffffffffffffffffffffffff1663b88d4fde308887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156136e55780820151818401526020810190506136ca565b50505050905090810190601f1680156137125780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561373457600080fd5b505af1158015613748573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16837f0ef52e516fb5aec15a5d3587e5480481b702b26db93c8430eca78b61990fd3f6876040518082815260200191505060405180910390a450505050505050565b600060096000838152602001908152602001600020805490509050919050565b606060078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138735780601f1061384857610100808354040283529160200191613873565b820191906000526020600020905b81548152906001019060200180831161385657829003601f168201915b5050505050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156138b957600080fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000600e6000838152602001908152602001600020805490509050919050565b8173ffffffffffffffffffffffffffffffffffffffff16639dc29fac30836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613a7d57600080fd5b505af1158015613a91573d6000803e3d6000fd5b50505050613aa0838383616623565b505050565b613ab0848484615edc565b613acf8373ffffffffffffffffffffffffffffffffffffffff166165fb565b15613cc85760008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613bcb578082015181840152602081019050613bb0565b50505050905090810190601f168015613bf85780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015613c1a57600080fd5b505af1158015613c2e573d6000803e3d6000fd5b505050506040513d6020811015613c4457600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515613cc657600080fd5b505b50505050565b613cda84848484615406565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480613e1857508173ffffffffffffffffffffffffffffffffffffffff1663e985e9c585336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015613ddc57600080fd5b505afa158015613df0573d6000803e3d6000fd5b505050506040513d6020811015613e0657600080fd5b81019080805190602001909291905050505b80613ef557503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663081812fc836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015613ea257600080fd5b505afa158015613eb6573d6000803e3d6000fd5b505050506040513d6020811015613ecc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16145b1515613f0057600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd8530846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015613fd757600080fd5b505af1158015613feb573d6000803e3d6000fd5b5050505050505050565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905060008111806140ba57506000600c600083815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054115b15156140c557600080fd5b84811415156140d357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561410f57600080fd5b600061411a8261292e565b6c01000000000000000000000000900490503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806141ec5750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b8061429257503373ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561429d57600080fd5b6142a88285856158f5565b606063095ea7b33085604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907c0100000000000000000000000000000000000000000000000000000000026020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000818251602084016000895af1508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3088876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561443957600080fd5b505af115801561444d573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16847f0ef52e516fb5aec15a5d3587e5480481b702b26db93c8430eca78b61990fd3f6876040518082815260200191505060405180910390a450505050505050565b60606144cb82615883565b15156144d657600080fd5b600860008381526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561457d5780601f106145525761010080835404028352916020019161457d565b820191906000526020600020905b81548152906001019060200180831161456057829003601f168201915b50505050509050919050565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561462c57600080fd5b505af1158015614640573d6000803e3d6000fd5b50505050600033905061465581858585615113565b50505050565b8173ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156146ca57600080fd5b505af11580156146de573d6000803e3d6000fd5b505050506146ed8383836158f5565b505050565b6146fc8383616983565b6147068282616b1c565b600080600084815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600033905060006002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515614818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f746f6b656e206e6f74206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b60008084815260200190815260200160002060009054906101000a900460ff161515156148ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f746f6b656e20616c7265616479206c6f636b656400000000000000000000000081525060200191505060405180910390fd5b600160008085815260200190815260200160002060006101000a81548160ff0219169083151502179055507fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3828285604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b60006010600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515614a1457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515614a5057600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205490506000811180614ba857506000600c600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054115b1515614bb357600080fd5b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000026bffffffffffffffffffffffff191660e063cd740db57c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060020a021781915091509250929050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515614cad57614ca08585616b5c565b8095508192505050614ce4565b6002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415614d3057614d238185616b5c565b8095508192505050614ce5565b6000606063ed81cdda3087604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907c0100000000000000000000000000000000000000000000000000000000026020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050602081825160208401865afa91508115614df657805193505b60011515821515148015614e57575063cd740db57c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660e085908060020a8204915050145b15614e685783945050505050614ed9565b826c01000000000000000000000000026bffffffffffffffffffffffff191660e063cd740db57c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060020a02179450505050505b92915050565b6000808251111515614f3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806171866046913960600191505060405180910390fd5b60006084359050602083511015614f645760088351026101000381908060020a820491505090505b614f7085823387615406565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015614ff557600080fd5b505afa158015615009573d6000803e3d6000fd5b505050506040513d602081101561501f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515156150bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4368696c6420746f6b656e206e6f74206f776e65642e0000000000000000000081525060200191505060405180910390fd5b63150b7a027c0100000000000000000000000000000000000000000000000000000000029150509392505050565b600080600083815260200190815260200160002060009054906101000a900460ff169050919050565b600073ffffffffffffffffffffffffffffffffffffffff166002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156151eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f5f746f6b656e496420646f6573206e6f742065786973742e000000000000000081525060200191505060405180910390fd5b60008114156151f957615400565b60006010600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561533a57600e600085815260200190815260200160002080549050600f600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e60008581526020019081526020016000208390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b816010600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff16848673ffffffffffffffffffffffffffffffffffffffff167f684ce28ace37552c6bfb98b7cceda8ed55327078eafb5dfb31218e0856382763856040518082815260200191505060405180910390a4505b50505050565b600073ffffffffffffffffffffffffffffffffffffffff166002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156154de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f5f746f6b656e496420646f6573206e6f742065786973742e000000000000000081525060200191505060405180910390fd5b6000600c600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205414151561559a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001806171466040913960400191505060405180910390fd5b6000600b600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008114156156de576009600085815260200190815260200160002080549050600a600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960008581526020019081526020016000208390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b600b600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150555060018101600c600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208190555083600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16848673ffffffffffffffffffffffffffffffffffffffff167f0371ddf2288ad1ba92626a7e31c86a9d006e592cfe57d7d946ef08b13457c08b856040518082815260200191505060405180910390a45050505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000600c600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020549050600081141515156159d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4368696c6420746f6b656e206e6f74206f776e656420627920746f6b656e2e0081525060200191505060405180910390fd5b60006001600b600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500390506000600b600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515615a8e57fe5b9060005260206000200154905080841415615b795780600b600088815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060018503815481101515615b0457fe5b906000526020600020018190555082600c600088815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055505b600b600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003615bdc9190616fb6565b50600c600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009055600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020600090556000821415615ed45760006001600960008981526020019081526020016000208054905003905060006009600089815260200190815260200160002082815481101515615cdf57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141515615e56576000600a60008a815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081600960008b815260200190815260200160002082815481101515615db757fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60008b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b60096000898152602001908152602001600020805480919060019003615e7c9190616fe2565b50600a600089815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905550505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515615f1857600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515615f8557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515615fc157600080fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156162b357600080606063ed81cdda3085604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907c0100000000000000000000000000000000000000000000000000000000026020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050602081825160208401895afa915081156160bd57805192505b6001151582151514156161745763cd740db57c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660e084908060020a820491505014151515616173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061707c602b913960400191505060405180910390fd5b5b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806162a457503373ffffffffffffffffffffffffffffffffffffffff16600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15156162af57600080fd5b5050505b600073ffffffffffffffffffffffffffffffffffffffff16600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561642957600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905580600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561659b576000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156164a957fe5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055505b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080823b905060008111915050919050565b61662061661a82612ea7565b82616c6d565b50565b60008114156166315761697e565b60006010600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101515156166e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806170e06027913960400191505060405180910390fd5b60008282039050806010600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600081141561697b5760006001600e6000888152602001908152602001600020805490500390506000600e60008881526020019081526020016000208281548110151561678657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415156168fd576000600f600089815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081600e60008a81526020019081526020016000208281548110151561685e57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600f60008a815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600e60008881526020019081526020016000208054809190600190036169239190616fe2565b50600f600088815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905550505b50505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156169bf57600080fd5b6169c881615883565b1515156169d457600080fd5b816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550616a796001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054616e5290919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b616b2582615883565b1515616b3057600080fd5b80600860008481526020019081526020016000209080519060200190616b57929190616f36565b505050565b600080600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205490506000811180616c2257506000600c600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054115b1515616c2d57600080fd5b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681915091509250929050565b8173ffffffffffffffffffffffffffffffffffffffff16616c8d82612ea7565b73ffffffffffffffffffffffffffffffffffffffff16141515616caf57600080fd5b616cb881616e73565b616d0b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054616f1490919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060086000838152602001908152602001600020805460018160011615610100020316600290049050141515616df257600860008281526020019081526020016000206000616df1919061700e565b5b80600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808284019050838110151515616e6957600080fd5b8091505092915050565b6000616e7e82612ea7565b90506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000828211151515616f2557600080fd5b600082840390508091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10616f7757805160ff1916838001178555616fa5565b82800160010185558215616fa5579182015b82811115616fa4578251825591602001919060010190616f89565b5b509050616fb29190617056565b5090565b815481835581811115616fdd57818360005260206000209182019101616fdc9190617056565b5b505050565b815481835581811115617009578183600052602060002091820191016170089190617056565b5b505050565b50805460018160011615610100020316600290046000825580601f106170345750617053565b601f0160209004906000526020600020908101906170529190617056565b5b50565b61707891905b8082111561707457600081600090555060010161705c565b5090565b9056fe546f6b656e206973206368696c64206f66206f7468657220746f7020646f776e20636f6d706f7361626c65436f6e7472616374206164647265737320646f6573206e6f7420657869737420666f72207468697320746f6b656e20616e6420696e6465782e4e6f7420656e6f75676820746f6b656e20617661696c61626c6520746f207472616e736665722e546f6b656e20646f6573206e6f74206f776e2061206368696c6420746f6b656e20617420636f6e7472616374206164647265737320616e6420696e6465782e43616e6e6f742072656365697665206368696c6420746f6b656e20626563617573652069742068617320616c7265616479206265656e2072656365697665642e5f64617461206d75737420636f6e7461696e207468652075696e7432353620746f6b656e496420746f207472616e7366657220746865206368696c6420746f6b656e20746f2ea165627a7a7230582083df089b1d9d680b4ac73b6c2a8df5623ca69da9d62b8ac28651249c10298f540029`

// DeployPvcERC998 deploys a new Ethereum contract, binding an instance of PvcERC998 to it.
func DeployPvcERC998(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string) (common.Address, *types.Transaction, *PvcERC998, error) {
	parsed, err := abi.JSON(strings.NewReader(PvcERC998ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PvcERC998Bin), backend, name, symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PvcERC998{PvcERC998Caller: PvcERC998Caller{contract: contract}, PvcERC998Transactor: PvcERC998Transactor{contract: contract}, PvcERC998Filterer: PvcERC998Filterer{contract: contract}}, nil
}

// PvcERC998 is an auto generated Go binding around an Ethereum contract.
type PvcERC998 struct {
	PvcERC998Caller     // Read-only binding to the contract
	PvcERC998Transactor // Write-only binding to the contract
	PvcERC998Filterer   // Log filterer for contract events
}

// PvcERC998Caller is an auto generated read-only Go binding around an Ethereum contract.
type PvcERC998Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PvcERC998Transactor is an auto generated write-only Go binding around an Ethereum contract.
type PvcERC998Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PvcERC998Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PvcERC998Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PvcERC998Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PvcERC998Session struct {
	Contract     *PvcERC998        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PvcERC998CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PvcERC998CallerSession struct {
	Contract *PvcERC998Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// PvcERC998TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PvcERC998TransactorSession struct {
	Contract     *PvcERC998Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// PvcERC998Raw is an auto generated low-level Go binding around an Ethereum contract.
type PvcERC998Raw struct {
	Contract *PvcERC998 // Generic contract binding to access the raw methods on
}

// PvcERC998CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PvcERC998CallerRaw struct {
	Contract *PvcERC998Caller // Generic read-only contract binding to access the raw methods on
}

// PvcERC998TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PvcERC998TransactorRaw struct {
	Contract *PvcERC998Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPvcERC998 creates a new instance of PvcERC998, bound to a specific deployed contract.
func NewPvcERC998(address common.Address, backend bind.ContractBackend) (*PvcERC998, error) {
	contract, err := bindPvcERC998(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PvcERC998{PvcERC998Caller: PvcERC998Caller{contract: contract}, PvcERC998Transactor: PvcERC998Transactor{contract: contract}, PvcERC998Filterer: PvcERC998Filterer{contract: contract}}, nil
}

// NewPvcERC998Caller creates a new read-only instance of PvcERC998, bound to a specific deployed contract.
func NewPvcERC998Caller(address common.Address, caller bind.ContractCaller) (*PvcERC998Caller, error) {
	contract, err := bindPvcERC998(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PvcERC998Caller{contract: contract}, nil
}

// NewPvcERC998Transactor creates a new write-only instance of PvcERC998, bound to a specific deployed contract.
func NewPvcERC998Transactor(address common.Address, transactor bind.ContractTransactor) (*PvcERC998Transactor, error) {
	contract, err := bindPvcERC998(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PvcERC998Transactor{contract: contract}, nil
}

// NewPvcERC998Filterer creates a new log filterer instance of PvcERC998, bound to a specific deployed contract.
func NewPvcERC998Filterer(address common.Address, filterer bind.ContractFilterer) (*PvcERC998Filterer, error) {
	contract, err := bindPvcERC998(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PvcERC998Filterer{contract: contract}, nil
}

// bindPvcERC998 binds a generic wrapper to an already deployed contract.
func bindPvcERC998(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PvcERC998ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PvcERC998 *PvcERC998Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _PvcERC998.Contract.PvcERC998Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PvcERC998 *PvcERC998Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PvcERC998.Contract.PvcERC998Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PvcERC998 *PvcERC998Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PvcERC998.Contract.PvcERC998Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PvcERC998 *PvcERC998CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _PvcERC998.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PvcERC998 *PvcERC998TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PvcERC998.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PvcERC998 *PvcERC998TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PvcERC998.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(owner address) constant returns(uint256)
func (_PvcERC998 *PvcERC998Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "balanceOf", owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(owner address) constant returns(uint256)
func (_PvcERC998 *PvcERC998Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _PvcERC998.Contract.BalanceOf(&_PvcERC998.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(owner address) constant returns(uint256)
func (_PvcERC998 *PvcERC998CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _PvcERC998.Contract.BalanceOf(&_PvcERC998.CallOpts, owner)
}

// BalanceOfERC20 is a free data retrieval call binding the contract method 0xe226ed22.
//
// Solidity: function balanceOfERC20(_tokenId uint256, _erc20Contract address) constant returns(uint256)
func (_PvcERC998 *PvcERC998Caller) BalanceOfERC20(opts *bind.CallOpts, _tokenId *big.Int, _erc20Contract common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "balanceOfERC20", _tokenId, _erc20Contract)
	return *ret0, err
}

// BalanceOfERC20 is a free data retrieval call binding the contract method 0xe226ed22.
//
// Solidity: function balanceOfERC20(_tokenId uint256, _erc20Contract address) constant returns(uint256)
func (_PvcERC998 *PvcERC998Session) BalanceOfERC20(_tokenId *big.Int, _erc20Contract common.Address) (*big.Int, error) {
	return _PvcERC998.Contract.BalanceOfERC20(&_PvcERC998.CallOpts, _tokenId, _erc20Contract)
}

// BalanceOfERC20 is a free data retrieval call binding the contract method 0xe226ed22.
//
// Solidity: function balanceOfERC20(_tokenId uint256, _erc20Contract address) constant returns(uint256)
func (_PvcERC998 *PvcERC998CallerSession) BalanceOfERC20(_tokenId *big.Int, _erc20Contract common.Address) (*big.Int, error) {
	return _PvcERC998.Contract.BalanceOfERC20(&_PvcERC998.CallOpts, _tokenId, _erc20Contract)
}

// ChildContractByIndex is a free data retrieval call binding the contract method 0x0d5a621b.
//
// Solidity: function childContractByIndex(_tokenId uint256, _index uint256) constant returns(childContract address)
func (_PvcERC998 *PvcERC998Caller) ChildContractByIndex(opts *bind.CallOpts, _tokenId *big.Int, _index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "childContractByIndex", _tokenId, _index)
	return *ret0, err
}

// ChildContractByIndex is a free data retrieval call binding the contract method 0x0d5a621b.
//
// Solidity: function childContractByIndex(_tokenId uint256, _index uint256) constant returns(childContract address)
func (_PvcERC998 *PvcERC998Session) ChildContractByIndex(_tokenId *big.Int, _index *big.Int) (common.Address, error) {
	return _PvcERC998.Contract.ChildContractByIndex(&_PvcERC998.CallOpts, _tokenId, _index)
}

// ChildContractByIndex is a free data retrieval call binding the contract method 0x0d5a621b.
//
// Solidity: function childContractByIndex(_tokenId uint256, _index uint256) constant returns(childContract address)
func (_PvcERC998 *PvcERC998CallerSession) ChildContractByIndex(_tokenId *big.Int, _index *big.Int) (common.Address, error) {
	return _PvcERC998.Contract.ChildContractByIndex(&_PvcERC998.CallOpts, _tokenId, _index)
}

// ChildExists is a free data retrieval call binding the contract method 0x5680a3ad.
//
// Solidity: function childExists(_childContract address, _childTokenId uint256) constant returns(bool)
func (_PvcERC998 *PvcERC998Caller) ChildExists(opts *bind.CallOpts, _childContract common.Address, _childTokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "childExists", _childContract, _childTokenId)
	return *ret0, err
}

// ChildExists is a free data retrieval call binding the contract method 0x5680a3ad.
//
// Solidity: function childExists(_childContract address, _childTokenId uint256) constant returns(bool)
func (_PvcERC998 *PvcERC998Session) ChildExists(_childContract common.Address, _childTokenId *big.Int) (bool, error) {
	return _PvcERC998.Contract.ChildExists(&_PvcERC998.CallOpts, _childContract, _childTokenId)
}

// ChildExists is a free data retrieval call binding the contract method 0x5680a3ad.
//
// Solidity: function childExists(_childContract address, _childTokenId uint256) constant returns(bool)
func (_PvcERC998 *PvcERC998CallerSession) ChildExists(_childContract common.Address, _childTokenId *big.Int) (bool, error) {
	return _PvcERC998.Contract.ChildExists(&_PvcERC998.CallOpts, _childContract, _childTokenId)
}

// ChildTokenByIndex is a free data retrieval call binding the contract method 0x160b01a1.
//
// Solidity: function childTokenByIndex(_tokenId uint256, _childContract address, _index uint256) constant returns(childTokenId uint256)
func (_PvcERC998 *PvcERC998Caller) ChildTokenByIndex(opts *bind.CallOpts, _tokenId *big.Int, _childContract common.Address, _index *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "childTokenByIndex", _tokenId, _childContract, _index)
	return *ret0, err
}

// ChildTokenByIndex is a free data retrieval call binding the contract method 0x160b01a1.
//
// Solidity: function childTokenByIndex(_tokenId uint256, _childContract address, _index uint256) constant returns(childTokenId uint256)
func (_PvcERC998 *PvcERC998Session) ChildTokenByIndex(_tokenId *big.Int, _childContract common.Address, _index *big.Int) (*big.Int, error) {
	return _PvcERC998.Contract.ChildTokenByIndex(&_PvcERC998.CallOpts, _tokenId, _childContract, _index)
}

// ChildTokenByIndex is a free data retrieval call binding the contract method 0x160b01a1.
//
// Solidity: function childTokenByIndex(_tokenId uint256, _childContract address, _index uint256) constant returns(childTokenId uint256)
func (_PvcERC998 *PvcERC998CallerSession) ChildTokenByIndex(_tokenId *big.Int, _childContract common.Address, _index *big.Int) (*big.Int, error) {
	return _PvcERC998.Contract.ChildTokenByIndex(&_PvcERC998.CallOpts, _tokenId, _childContract, _index)
}

// Erc20ContractByIndex is a free data retrieval call binding the contract method 0x627c81ff.
//
// Solidity: function erc20ContractByIndex(_tokenId uint256, _index uint256) constant returns(address)
func (_PvcERC998 *PvcERC998Caller) Erc20ContractByIndex(opts *bind.CallOpts, _tokenId *big.Int, _index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "erc20ContractByIndex", _tokenId, _index)
	return *ret0, err
}

// Erc20ContractByIndex is a free data retrieval call binding the contract method 0x627c81ff.
//
// Solidity: function erc20ContractByIndex(_tokenId uint256, _index uint256) constant returns(address)
func (_PvcERC998 *PvcERC998Session) Erc20ContractByIndex(_tokenId *big.Int, _index *big.Int) (common.Address, error) {
	return _PvcERC998.Contract.Erc20ContractByIndex(&_PvcERC998.CallOpts, _tokenId, _index)
}

// Erc20ContractByIndex is a free data retrieval call binding the contract method 0x627c81ff.
//
// Solidity: function erc20ContractByIndex(_tokenId uint256, _index uint256) constant returns(address)
func (_PvcERC998 *PvcERC998CallerSession) Erc20ContractByIndex(_tokenId *big.Int, _index *big.Int) (common.Address, error) {
	return _PvcERC998.Contract.Erc20ContractByIndex(&_PvcERC998.CallOpts, _tokenId, _index)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_PvcERC998 *PvcERC998Caller) GetApproved(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "getApproved", _tokenId)
	return *ret0, err
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_PvcERC998 *PvcERC998Session) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _PvcERC998.Contract.GetApproved(&_PvcERC998.CallOpts, _tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_PvcERC998 *PvcERC998CallerSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _PvcERC998.Contract.GetApproved(&_PvcERC998.CallOpts, _tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(bool)
func (_PvcERC998 *PvcERC998Caller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "isApprovedForAll", _owner, _operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(bool)
func (_PvcERC998 *PvcERC998Session) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _PvcERC998.Contract.IsApprovedForAll(&_PvcERC998.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(bool)
func (_PvcERC998 *PvcERC998CallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _PvcERC998.Contract.IsApprovedForAll(&_PvcERC998.CallOpts, _owner, _operator)
}

// IsLocked is a free data retrieval call binding the contract method 0xf6aacfb1.
//
// Solidity: function isLocked(tokenId uint256) constant returns(bool)
func (_PvcERC998 *PvcERC998Caller) IsLocked(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "isLocked", tokenId)
	return *ret0, err
}

// IsLocked is a free data retrieval call binding the contract method 0xf6aacfb1.
//
// Solidity: function isLocked(tokenId uint256) constant returns(bool)
func (_PvcERC998 *PvcERC998Session) IsLocked(tokenId *big.Int) (bool, error) {
	return _PvcERC998.Contract.IsLocked(&_PvcERC998.CallOpts, tokenId)
}

// IsLocked is a free data retrieval call binding the contract method 0xf6aacfb1.
//
// Solidity: function isLocked(tokenId uint256) constant returns(bool)
func (_PvcERC998 *PvcERC998CallerSession) IsLocked(tokenId *big.Int) (bool, error) {
	return _PvcERC998.Contract.IsLocked(&_PvcERC998.CallOpts, tokenId)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_PvcERC998 *PvcERC998Caller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_PvcERC998 *PvcERC998Session) Name() (string, error) {
	return _PvcERC998.Contract.Name(&_PvcERC998.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_PvcERC998 *PvcERC998CallerSession) Name() (string, error) {
	return _PvcERC998.Contract.Name(&_PvcERC998.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_PvcERC998 *PvcERC998Caller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "ownerOf", _tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_PvcERC998 *PvcERC998Session) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _PvcERC998.Contract.OwnerOf(&_PvcERC998.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_PvcERC998 *PvcERC998CallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _PvcERC998.Contract.OwnerOf(&_PvcERC998.CallOpts, _tokenId)
}

// OwnerOfChild is a free data retrieval call binding the contract method 0xeadb80b8.
//
// Solidity: function ownerOfChild(_childContract address, _childTokenId uint256) constant returns(parentTokenOwner bytes32, parentTokenId uint256)
func (_PvcERC998 *PvcERC998Caller) OwnerOfChild(opts *bind.CallOpts, _childContract common.Address, _childTokenId *big.Int) (struct {
	ParentTokenOwner [32]byte
	ParentTokenId    *big.Int
}, error) {
	ret := new(struct {
		ParentTokenOwner [32]byte
		ParentTokenId    *big.Int
	})
	out := ret
	err := _PvcERC998.contract.Call(opts, out, "ownerOfChild", _childContract, _childTokenId)
	return *ret, err
}

// OwnerOfChild is a free data retrieval call binding the contract method 0xeadb80b8.
//
// Solidity: function ownerOfChild(_childContract address, _childTokenId uint256) constant returns(parentTokenOwner bytes32, parentTokenId uint256)
func (_PvcERC998 *PvcERC998Session) OwnerOfChild(_childContract common.Address, _childTokenId *big.Int) (struct {
	ParentTokenOwner [32]byte
	ParentTokenId    *big.Int
}, error) {
	return _PvcERC998.Contract.OwnerOfChild(&_PvcERC998.CallOpts, _childContract, _childTokenId)
}

// OwnerOfChild is a free data retrieval call binding the contract method 0xeadb80b8.
//
// Solidity: function ownerOfChild(_childContract address, _childTokenId uint256) constant returns(parentTokenOwner bytes32, parentTokenId uint256)
func (_PvcERC998 *PvcERC998CallerSession) OwnerOfChild(_childContract common.Address, _childTokenId *big.Int) (struct {
	ParentTokenOwner [32]byte
	ParentTokenId    *big.Int
}, error) {
	return _PvcERC998.Contract.OwnerOfChild(&_PvcERC998.CallOpts, _childContract, _childTokenId)
}

// RootOwnerOf is a free data retrieval call binding the contract method 0x43a61a8e.
//
// Solidity: function rootOwnerOf(_tokenId uint256) constant returns(bytes32)
func (_PvcERC998 *PvcERC998Caller) RootOwnerOf(opts *bind.CallOpts, _tokenId *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "rootOwnerOf", _tokenId)
	return *ret0, err
}

// RootOwnerOf is a free data retrieval call binding the contract method 0x43a61a8e.
//
// Solidity: function rootOwnerOf(_tokenId uint256) constant returns(bytes32)
func (_PvcERC998 *PvcERC998Session) RootOwnerOf(_tokenId *big.Int) ([32]byte, error) {
	return _PvcERC998.Contract.RootOwnerOf(&_PvcERC998.CallOpts, _tokenId)
}

// RootOwnerOf is a free data retrieval call binding the contract method 0x43a61a8e.
//
// Solidity: function rootOwnerOf(_tokenId uint256) constant returns(bytes32)
func (_PvcERC998 *PvcERC998CallerSession) RootOwnerOf(_tokenId *big.Int) ([32]byte, error) {
	return _PvcERC998.Contract.RootOwnerOf(&_PvcERC998.CallOpts, _tokenId)
}

// RootOwnerOfChild is a free data retrieval call binding the contract method 0xed81cdda.
//
// Solidity: function rootOwnerOfChild(_childContract address, _childTokenId uint256) constant returns(bytes32)
func (_PvcERC998 *PvcERC998Caller) RootOwnerOfChild(opts *bind.CallOpts, _childContract common.Address, _childTokenId *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "rootOwnerOfChild", _childContract, _childTokenId)
	return *ret0, err
}

// RootOwnerOfChild is a free data retrieval call binding the contract method 0xed81cdda.
//
// Solidity: function rootOwnerOfChild(_childContract address, _childTokenId uint256) constant returns(bytes32)
func (_PvcERC998 *PvcERC998Session) RootOwnerOfChild(_childContract common.Address, _childTokenId *big.Int) ([32]byte, error) {
	return _PvcERC998.Contract.RootOwnerOfChild(&_PvcERC998.CallOpts, _childContract, _childTokenId)
}

// RootOwnerOfChild is a free data retrieval call binding the contract method 0xed81cdda.
//
// Solidity: function rootOwnerOfChild(_childContract address, _childTokenId uint256) constant returns(bytes32)
func (_PvcERC998 *PvcERC998CallerSession) RootOwnerOfChild(_childContract common.Address, _childTokenId *big.Int) ([32]byte, error) {
	return _PvcERC998.Contract.RootOwnerOfChild(&_PvcERC998.CallOpts, _childContract, _childTokenId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_PvcERC998 *PvcERC998Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_PvcERC998 *PvcERC998Session) Symbol() (string, error) {
	return _PvcERC998.Contract.Symbol(&_PvcERC998.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_PvcERC998 *PvcERC998CallerSession) Symbol() (string, error) {
	return _PvcERC998.Contract.Symbol(&_PvcERC998.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(tokenId uint256) constant returns(string)
func (_PvcERC998 *PvcERC998Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "tokenURI", tokenId)
	return *ret0, err
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(tokenId uint256) constant returns(string)
func (_PvcERC998 *PvcERC998Session) TokenURI(tokenId *big.Int) (string, error) {
	return _PvcERC998.Contract.TokenURI(&_PvcERC998.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(tokenId uint256) constant returns(string)
func (_PvcERC998 *PvcERC998CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _PvcERC998.Contract.TokenURI(&_PvcERC998.CallOpts, tokenId)
}

// TotalChildContracts is a free data retrieval call binding the contract method 0x8da7d0b5.
//
// Solidity: function totalChildContracts(_tokenId uint256) constant returns(uint256)
func (_PvcERC998 *PvcERC998Caller) TotalChildContracts(opts *bind.CallOpts, _tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "totalChildContracts", _tokenId)
	return *ret0, err
}

// TotalChildContracts is a free data retrieval call binding the contract method 0x8da7d0b5.
//
// Solidity: function totalChildContracts(_tokenId uint256) constant returns(uint256)
func (_PvcERC998 *PvcERC998Session) TotalChildContracts(_tokenId *big.Int) (*big.Int, error) {
	return _PvcERC998.Contract.TotalChildContracts(&_PvcERC998.CallOpts, _tokenId)
}

// TotalChildContracts is a free data retrieval call binding the contract method 0x8da7d0b5.
//
// Solidity: function totalChildContracts(_tokenId uint256) constant returns(uint256)
func (_PvcERC998 *PvcERC998CallerSession) TotalChildContracts(_tokenId *big.Int) (*big.Int, error) {
	return _PvcERC998.Contract.TotalChildContracts(&_PvcERC998.CallOpts, _tokenId)
}

// TotalChildTokens is a free data retrieval call binding the contract method 0x35b21ceb.
//
// Solidity: function totalChildTokens(_tokenId uint256, _childContract address) constant returns(uint256)
func (_PvcERC998 *PvcERC998Caller) TotalChildTokens(opts *bind.CallOpts, _tokenId *big.Int, _childContract common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "totalChildTokens", _tokenId, _childContract)
	return *ret0, err
}

// TotalChildTokens is a free data retrieval call binding the contract method 0x35b21ceb.
//
// Solidity: function totalChildTokens(_tokenId uint256, _childContract address) constant returns(uint256)
func (_PvcERC998 *PvcERC998Session) TotalChildTokens(_tokenId *big.Int, _childContract common.Address) (*big.Int, error) {
	return _PvcERC998.Contract.TotalChildTokens(&_PvcERC998.CallOpts, _tokenId, _childContract)
}

// TotalChildTokens is a free data retrieval call binding the contract method 0x35b21ceb.
//
// Solidity: function totalChildTokens(_tokenId uint256, _childContract address) constant returns(uint256)
func (_PvcERC998 *PvcERC998CallerSession) TotalChildTokens(_tokenId *big.Int, _childContract common.Address) (*big.Int, error) {
	return _PvcERC998.Contract.TotalChildTokens(&_PvcERC998.CallOpts, _tokenId, _childContract)
}

// TotalERC20Contracts is a free data retrieval call binding the contract method 0xa7811732.
//
// Solidity: function totalERC20Contracts(_tokenId uint256) constant returns(uint256)
func (_PvcERC998 *PvcERC998Caller) TotalERC20Contracts(opts *bind.CallOpts, _tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _PvcERC998.contract.Call(opts, out, "totalERC20Contracts", _tokenId)
	return *ret0, err
}

// TotalERC20Contracts is a free data retrieval call binding the contract method 0xa7811732.
//
// Solidity: function totalERC20Contracts(_tokenId uint256) constant returns(uint256)
func (_PvcERC998 *PvcERC998Session) TotalERC20Contracts(_tokenId *big.Int) (*big.Int, error) {
	return _PvcERC998.Contract.TotalERC20Contracts(&_PvcERC998.CallOpts, _tokenId)
}

// TotalERC20Contracts is a free data retrieval call binding the contract method 0xa7811732.
//
// Solidity: function totalERC20Contracts(_tokenId uint256) constant returns(uint256)
func (_PvcERC998 *PvcERC998CallerSession) TotalERC20Contracts(_tokenId *big.Int) (*big.Int, error) {
	return _PvcERC998.Contract.TotalERC20Contracts(&_PvcERC998.CallOpts, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_approved address, _tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) Approve(opts *bind.TransactOpts, _approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "approve", _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_approved address, _tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Session) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.Approve(&_PvcERC998.TransactOpts, _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_approved address, _tokenId uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.Approve(&_PvcERC998.TransactOpts, _approved, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Session) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.Burn(&_PvcERC998.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(tokenId uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.Burn(&_PvcERC998.TransactOpts, tokenId)
}

// BurnERC20Child is a paid mutator transaction binding the contract method 0xa9218517.
//
// Solidity: function burnERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) BurnERC20Child(opts *bind.TransactOpts, parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "burnERC20Child", parentTokenId, childContract, value)
}

// BurnERC20Child is a paid mutator transaction binding the contract method 0xa9218517.
//
// Solidity: function burnERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PvcERC998 *PvcERC998Session) BurnERC20Child(parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.BurnERC20Child(&_PvcERC998.TransactOpts, parentTokenId, childContract, value)
}

// BurnERC20Child is a paid mutator transaction binding the contract method 0xa9218517.
//
// Solidity: function burnERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) BurnERC20Child(parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.BurnERC20Child(&_PvcERC998.TransactOpts, parentTokenId, childContract, value)
}

// BurnERC721Child is a paid mutator transaction binding the contract method 0xceb00e6f.
//
// Solidity: function burnERC721Child(parentTokenId uint256, childContract address, childTokenId uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) BurnERC721Child(opts *bind.TransactOpts, parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "burnERC721Child", parentTokenId, childContract, childTokenId)
}

// BurnERC721Child is a paid mutator transaction binding the contract method 0xceb00e6f.
//
// Solidity: function burnERC721Child(parentTokenId uint256, childContract address, childTokenId uint256) returns()
func (_PvcERC998 *PvcERC998Session) BurnERC721Child(parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.BurnERC721Child(&_PvcERC998.TransactOpts, parentTokenId, childContract, childTokenId)
}

// BurnERC721Child is a paid mutator transaction binding the contract method 0xceb00e6f.
//
// Solidity: function burnERC721Child(parentTokenId uint256, childContract address, childTokenId uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) BurnERC721Child(parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.BurnERC721Child(&_PvcERC998.TransactOpts, parentTokenId, childContract, childTokenId)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0x56df3db1.
//
// Solidity: function changeOwner(owner address, tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) ChangeOwner(opts *bind.TransactOpts, owner common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "changeOwner", owner, tokenId)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0x56df3db1.
//
// Solidity: function changeOwner(owner address, tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Session) ChangeOwner(owner common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.ChangeOwner(&_PvcERC998.TransactOpts, owner, tokenId)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0x56df3db1.
//
// Solidity: function changeOwner(owner address, tokenId uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) ChangeOwner(owner common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.ChangeOwner(&_PvcERC998.TransactOpts, owner, tokenId)
}

// GetChild is a paid mutator transaction binding the contract method 0xba6b5f96.
//
// Solidity: function getChild(_from address, _tokenId uint256, _childContract address, _childTokenId uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) GetChild(opts *bind.TransactOpts, _from common.Address, _tokenId *big.Int, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "getChild", _from, _tokenId, _childContract, _childTokenId)
}

// GetChild is a paid mutator transaction binding the contract method 0xba6b5f96.
//
// Solidity: function getChild(_from address, _tokenId uint256, _childContract address, _childTokenId uint256) returns()
func (_PvcERC998 *PvcERC998Session) GetChild(_from common.Address, _tokenId *big.Int, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.GetChild(&_PvcERC998.TransactOpts, _from, _tokenId, _childContract, _childTokenId)
}

// GetChild is a paid mutator transaction binding the contract method 0xba6b5f96.
//
// Solidity: function getChild(_from address, _tokenId uint256, _childContract address, _childTokenId uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) GetChild(_from common.Address, _tokenId *big.Int, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.GetChild(&_PvcERC998.TransactOpts, _from, _tokenId, _childContract, _childTokenId)
}

// GetERC20 is a paid mutator transaction binding the contract method 0x07cff6f2.
//
// Solidity: function getERC20(_from address, _tokenId uint256, _erc20Contract address, _value uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) GetERC20(opts *bind.TransactOpts, _from common.Address, _tokenId *big.Int, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "getERC20", _from, _tokenId, _erc20Contract, _value)
}

// GetERC20 is a paid mutator transaction binding the contract method 0x07cff6f2.
//
// Solidity: function getERC20(_from address, _tokenId uint256, _erc20Contract address, _value uint256) returns()
func (_PvcERC998 *PvcERC998Session) GetERC20(_from common.Address, _tokenId *big.Int, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.GetERC20(&_PvcERC998.TransactOpts, _from, _tokenId, _erc20Contract, _value)
}

// GetERC20 is a paid mutator transaction binding the contract method 0x07cff6f2.
//
// Solidity: function getERC20(_from address, _tokenId uint256, _erc20Contract address, _value uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) GetERC20(_from common.Address, _tokenId *big.Int, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.GetERC20(&_PvcERC998.TransactOpts, _from, _tokenId, _erc20Contract, _value)
}

// Lock is a paid mutator transaction binding the contract method 0xdd467064.
//
// Solidity: function lock(tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) Lock(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "lock", tokenId)
}

// Lock is a paid mutator transaction binding the contract method 0xdd467064.
//
// Solidity: function lock(tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Session) Lock(tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.Lock(&_PvcERC998.TransactOpts, tokenId)
}

// Lock is a paid mutator transaction binding the contract method 0xdd467064.
//
// Solidity: function lock(tokenId uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) Lock(tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.Lock(&_PvcERC998.TransactOpts, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0xd3fc9864.
//
// Solidity: function mint(to address, tokenId uint256, uri string) returns()
func (_PvcERC998 *PvcERC998Transactor) Mint(opts *bind.TransactOpts, to common.Address, tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "mint", to, tokenId, uri)
}

// Mint is a paid mutator transaction binding the contract method 0xd3fc9864.
//
// Solidity: function mint(to address, tokenId uint256, uri string) returns()
func (_PvcERC998 *PvcERC998Session) Mint(to common.Address, tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PvcERC998.Contract.Mint(&_PvcERC998.TransactOpts, to, tokenId, uri)
}

// Mint is a paid mutator transaction binding the contract method 0xd3fc9864.
//
// Solidity: function mint(to address, tokenId uint256, uri string) returns()
func (_PvcERC998 *PvcERC998TransactorSession) Mint(to common.Address, tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PvcERC998.Contract.Mint(&_PvcERC998.TransactOpts, to, tokenId, uri)
}

// MintERC20Child is a paid mutator transaction binding the contract method 0xcc12e613.
//
// Solidity: function mintERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) MintERC20Child(opts *bind.TransactOpts, parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "mintERC20Child", parentTokenId, childContract, value)
}

// MintERC20Child is a paid mutator transaction binding the contract method 0xcc12e613.
//
// Solidity: function mintERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PvcERC998 *PvcERC998Session) MintERC20Child(parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.MintERC20Child(&_PvcERC998.TransactOpts, parentTokenId, childContract, value)
}

// MintERC20Child is a paid mutator transaction binding the contract method 0xcc12e613.
//
// Solidity: function mintERC20Child(parentTokenId uint256, childContract address, value uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) MintERC20Child(parentTokenId *big.Int, childContract common.Address, value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.MintERC20Child(&_PvcERC998.TransactOpts, parentTokenId, childContract, value)
}

// MintERC721Child is a paid mutator transaction binding the contract method 0x5061c1ed.
//
// Solidity: function mintERC721Child(parentTokenId uint256, childContract address, childTokenId uint256, uri string) returns()
func (_PvcERC998 *PvcERC998Transactor) MintERC721Child(opts *bind.TransactOpts, parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "mintERC721Child", parentTokenId, childContract, childTokenId, uri)
}

// MintERC721Child is a paid mutator transaction binding the contract method 0x5061c1ed.
//
// Solidity: function mintERC721Child(parentTokenId uint256, childContract address, childTokenId uint256, uri string) returns()
func (_PvcERC998 *PvcERC998Session) MintERC721Child(parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PvcERC998.Contract.MintERC721Child(&_PvcERC998.TransactOpts, parentTokenId, childContract, childTokenId, uri)
}

// MintERC721Child is a paid mutator transaction binding the contract method 0x5061c1ed.
//
// Solidity: function mintERC721Child(parentTokenId uint256, childContract address, childTokenId uint256, uri string) returns()
func (_PvcERC998 *PvcERC998TransactorSession) MintERC721Child(parentTokenId *big.Int, childContract common.Address, childTokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PvcERC998.Contract.MintERC721Child(&_PvcERC998.TransactOpts, parentTokenId, childContract, childTokenId, uri)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0xf0b9e5ba.
//
// Solidity: function onERC721Received(_from address, _childTokenId uint256, _data bytes) returns(bytes4)
func (_PvcERC998 *PvcERC998Transactor) OnERC721Received(opts *bind.TransactOpts, _from common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "onERC721Received", _from, _childTokenId, _data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0xf0b9e5ba.
//
// Solidity: function onERC721Received(_from address, _childTokenId uint256, _data bytes) returns(bytes4)
func (_PvcERC998 *PvcERC998Session) OnERC721Received(_from common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PvcERC998.Contract.OnERC721Received(&_PvcERC998.TransactOpts, _from, _childTokenId, _data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0xf0b9e5ba.
//
// Solidity: function onERC721Received(_from address, _childTokenId uint256, _data bytes) returns(bytes4)
func (_PvcERC998 *PvcERC998TransactorSession) OnERC721Received(_from common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PvcERC998.Contract.OnERC721Received(&_PvcERC998.TransactOpts, _from, _childTokenId, _data)
}

// SafeTransferChild is a paid mutator transaction binding the contract method 0x8d81f51e.
//
// Solidity: function safeTransferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256, _data bytes) returns()
func (_PvcERC998 *PvcERC998Transactor) SafeTransferChild(opts *bind.TransactOpts, _fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "safeTransferChild", _fromTokenId, _to, _childContract, _childTokenId, _data)
}

// SafeTransferChild is a paid mutator transaction binding the contract method 0x8d81f51e.
//
// Solidity: function safeTransferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256, _data bytes) returns()
func (_PvcERC998 *PvcERC998Session) SafeTransferChild(_fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PvcERC998.Contract.SafeTransferChild(&_PvcERC998.TransactOpts, _fromTokenId, _to, _childContract, _childTokenId, _data)
}

// SafeTransferChild is a paid mutator transaction binding the contract method 0x8d81f51e.
//
// Solidity: function safeTransferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256, _data bytes) returns()
func (_PvcERC998 *PvcERC998TransactorSession) SafeTransferChild(_fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PvcERC998.Contract.SafeTransferChild(&_PvcERC998.TransactOpts, _fromTokenId, _to, _childContract, _childTokenId, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _data bytes) returns()
func (_PvcERC998 *PvcERC998Transactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "safeTransferFrom", _from, _to, _tokenId, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _data bytes) returns()
func (_PvcERC998 *PvcERC998Session) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PvcERC998.Contract.SafeTransferFrom(&_PvcERC998.TransactOpts, _from, _to, _tokenId, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _data bytes) returns()
func (_PvcERC998 *PvcERC998TransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _PvcERC998.Contract.SafeTransferFrom(&_PvcERC998.TransactOpts, _from, _to, _tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_PvcERC998 *PvcERC998Transactor) SetApprovalForAll(opts *bind.TransactOpts, _operator common.Address, _approved bool) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "setApprovalForAll", _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_PvcERC998 *PvcERC998Session) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _PvcERC998.Contract.SetApprovalForAll(&_PvcERC998.TransactOpts, _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_PvcERC998 *PvcERC998TransactorSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _PvcERC998.Contract.SetApprovalForAll(&_PvcERC998.TransactOpts, _operator, _approved)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(tokenId uint256, uri string) returns()
func (_PvcERC998 *PvcERC998Transactor) SetTokenURI(opts *bind.TransactOpts, tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "setTokenURI", tokenId, uri)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(tokenId uint256, uri string) returns()
func (_PvcERC998 *PvcERC998Session) SetTokenURI(tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PvcERC998.Contract.SetTokenURI(&_PvcERC998.TransactOpts, tokenId, uri)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(tokenId uint256, uri string) returns()
func (_PvcERC998 *PvcERC998TransactorSession) SetTokenURI(tokenId *big.Int, uri string) (*types.Transaction, error) {
	return _PvcERC998.Contract.SetTokenURI(&_PvcERC998.TransactOpts, tokenId, uri)
}

// TransferChild is a paid mutator transaction binding the contract method 0xbef44f18.
//
// Solidity: function transferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) TransferChild(opts *bind.TransactOpts, _fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "transferChild", _fromTokenId, _to, _childContract, _childTokenId)
}

// TransferChild is a paid mutator transaction binding the contract method 0xbef44f18.
//
// Solidity: function transferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256) returns()
func (_PvcERC998 *PvcERC998Session) TransferChild(_fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.TransferChild(&_PvcERC998.TransactOpts, _fromTokenId, _to, _childContract, _childTokenId)
}

// TransferChild is a paid mutator transaction binding the contract method 0xbef44f18.
//
// Solidity: function transferChild(_fromTokenId uint256, _to address, _childContract address, _childTokenId uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) TransferChild(_fromTokenId *big.Int, _to common.Address, _childContract common.Address, _childTokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.TransferChild(&_PvcERC998.TransactOpts, _fromTokenId, _to, _childContract, _childTokenId)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x830ef41b.
//
// Solidity: function transferERC20(_tokenId uint256, _to address, _erc20Contract address, _value uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) TransferERC20(opts *bind.TransactOpts, _tokenId *big.Int, _to common.Address, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "transferERC20", _tokenId, _to, _erc20Contract, _value)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x830ef41b.
//
// Solidity: function transferERC20(_tokenId uint256, _to address, _erc20Contract address, _value uint256) returns()
func (_PvcERC998 *PvcERC998Session) TransferERC20(_tokenId *big.Int, _to common.Address, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.TransferERC20(&_PvcERC998.TransactOpts, _tokenId, _to, _erc20Contract, _value)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x830ef41b.
//
// Solidity: function transferERC20(_tokenId uint256, _to address, _erc20Contract address, _value uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) TransferERC20(_tokenId *big.Int, _to common.Address, _erc20Contract common.Address, _value *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.TransferERC20(&_PvcERC998.TransactOpts, _tokenId, _to, _erc20Contract, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "transferFrom", _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Session) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.TransferFrom(&_PvcERC998.TransactOpts, _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.TransferFrom(&_PvcERC998.TransactOpts, _from, _to, _tokenId)
}

// Unlock is a paid mutator transaction binding the contract method 0x6198e339.
//
// Solidity: function unlock(tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Transactor) Unlock(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.contract.Transact(opts, "unlock", tokenId)
}

// Unlock is a paid mutator transaction binding the contract method 0x6198e339.
//
// Solidity: function unlock(tokenId uint256) returns()
func (_PvcERC998 *PvcERC998Session) Unlock(tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.Unlock(&_PvcERC998.TransactOpts, tokenId)
}

// Unlock is a paid mutator transaction binding the contract method 0x6198e339.
//
// Solidity: function unlock(tokenId uint256) returns()
func (_PvcERC998 *PvcERC998TransactorSession) Unlock(tokenId *big.Int) (*types.Transaction, error) {
	return _PvcERC998.Contract.Unlock(&_PvcERC998.TransactOpts, tokenId)
}

// PvcERC998ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the PvcERC998 contract.
type PvcERC998ApprovalIterator struct {
	Event *PvcERC998Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PvcERC998ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PvcERC998Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PvcERC998Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PvcERC998ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PvcERC998ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PvcERC998Approval represents a Approval event raised by the PvcERC998 contract.
type PvcERC998Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, approved indexed address, tokenId indexed uint256)
func (_PvcERC998 *PvcERC998Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*PvcERC998ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PvcERC998.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &PvcERC998ApprovalIterator{contract: _PvcERC998.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, approved indexed address, tokenId indexed uint256)
func (_PvcERC998 *PvcERC998Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PvcERC998Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PvcERC998.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PvcERC998Approval)
				if err := _PvcERC998.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PvcERC998ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the PvcERC998 contract.
type PvcERC998ApprovalForAllIterator struct {
	Event *PvcERC998ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PvcERC998ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PvcERC998ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PvcERC998ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PvcERC998ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PvcERC998ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PvcERC998ApprovalForAll represents a ApprovalForAll event raised by the PvcERC998 contract.
type PvcERC998ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(owner indexed address, operator indexed address, approved bool)
func (_PvcERC998 *PvcERC998Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*PvcERC998ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PvcERC998.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PvcERC998ApprovalForAllIterator{contract: _PvcERC998.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(owner indexed address, operator indexed address, approved bool)
func (_PvcERC998 *PvcERC998Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *PvcERC998ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PvcERC998.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PvcERC998ApprovalForAll)
				if err := _PvcERC998.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PvcERC998LockIterator is returned from FilterLock and is used to iterate over the raw logs and unpacked data for Lock events raised by the PvcERC998 contract.
type PvcERC998LockIterator struct {
	Event *PvcERC998Lock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PvcERC998LockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PvcERC998Lock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PvcERC998Lock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PvcERC998LockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PvcERC998LockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PvcERC998Lock represents a Lock event raised by the PvcERC998 contract.
type PvcERC998Lock struct {
	Operator common.Address
	Owner    common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLock is a free log retrieval operation binding the contract event 0xec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3.
//
// Solidity: e Lock(operator address, owner address, tokenId uint256)
func (_PvcERC998 *PvcERC998Filterer) FilterLock(opts *bind.FilterOpts) (*PvcERC998LockIterator, error) {

	logs, sub, err := _PvcERC998.contract.FilterLogs(opts, "Lock")
	if err != nil {
		return nil, err
	}
	return &PvcERC998LockIterator{contract: _PvcERC998.contract, event: "Lock", logs: logs, sub: sub}, nil
}

// WatchLock is a free log subscription operation binding the contract event 0xec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3.
//
// Solidity: e Lock(operator address, owner address, tokenId uint256)
func (_PvcERC998 *PvcERC998Filterer) WatchLock(opts *bind.WatchOpts, sink chan<- *PvcERC998Lock) (event.Subscription, error) {

	logs, sub, err := _PvcERC998.contract.WatchLogs(opts, "Lock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PvcERC998Lock)
				if err := _PvcERC998.contract.UnpackLog(event, "Lock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PvcERC998ReceivedChildIterator is returned from FilterReceivedChild and is used to iterate over the raw logs and unpacked data for ReceivedChild events raised by the PvcERC998 contract.
type PvcERC998ReceivedChildIterator struct {
	Event *PvcERC998ReceivedChild // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PvcERC998ReceivedChildIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PvcERC998ReceivedChild)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PvcERC998ReceivedChild)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PvcERC998ReceivedChildIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PvcERC998ReceivedChildIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PvcERC998ReceivedChild represents a ReceivedChild event raised by the PvcERC998 contract.
type PvcERC998ReceivedChild struct {
	From          common.Address
	TokenId       *big.Int
	ChildContract common.Address
	ChildTokenId  *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterReceivedChild is a free log retrieval operation binding the contract event 0x0371ddf2288ad1ba92626a7e31c86a9d006e592cfe57d7d946ef08b13457c08b.
//
// Solidity: e ReceivedChild(_from indexed address, _tokenId indexed uint256, _childContract indexed address, _childTokenId uint256)
func (_PvcERC998 *PvcERC998Filterer) FilterReceivedChild(opts *bind.FilterOpts, _from []common.Address, _tokenId []*big.Int, _childContract []common.Address) (*PvcERC998ReceivedChildIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _childContractRule []interface{}
	for _, _childContractItem := range _childContract {
		_childContractRule = append(_childContractRule, _childContractItem)
	}

	logs, sub, err := _PvcERC998.contract.FilterLogs(opts, "ReceivedChild", _fromRule, _tokenIdRule, _childContractRule)
	if err != nil {
		return nil, err
	}
	return &PvcERC998ReceivedChildIterator{contract: _PvcERC998.contract, event: "ReceivedChild", logs: logs, sub: sub}, nil
}

// WatchReceivedChild is a free log subscription operation binding the contract event 0x0371ddf2288ad1ba92626a7e31c86a9d006e592cfe57d7d946ef08b13457c08b.
//
// Solidity: e ReceivedChild(_from indexed address, _tokenId indexed uint256, _childContract indexed address, _childTokenId uint256)
func (_PvcERC998 *PvcERC998Filterer) WatchReceivedChild(opts *bind.WatchOpts, sink chan<- *PvcERC998ReceivedChild, _from []common.Address, _tokenId []*big.Int, _childContract []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _childContractRule []interface{}
	for _, _childContractItem := range _childContract {
		_childContractRule = append(_childContractRule, _childContractItem)
	}

	logs, sub, err := _PvcERC998.contract.WatchLogs(opts, "ReceivedChild", _fromRule, _tokenIdRule, _childContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PvcERC998ReceivedChild)
				if err := _PvcERC998.contract.UnpackLog(event, "ReceivedChild", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PvcERC998ReceivedERC20Iterator is returned from FilterReceivedERC20 and is used to iterate over the raw logs and unpacked data for ReceivedERC20 events raised by the PvcERC998 contract.
type PvcERC998ReceivedERC20Iterator struct {
	Event *PvcERC998ReceivedERC20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PvcERC998ReceivedERC20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PvcERC998ReceivedERC20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PvcERC998ReceivedERC20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PvcERC998ReceivedERC20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PvcERC998ReceivedERC20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PvcERC998ReceivedERC20 represents a ReceivedERC20 event raised by the PvcERC998 contract.
type PvcERC998ReceivedERC20 struct {
	From          common.Address
	TokenId       *big.Int
	Erc20Contract common.Address
	Value         *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterReceivedERC20 is a free log retrieval operation binding the contract event 0x684ce28ace37552c6bfb98b7cceda8ed55327078eafb5dfb31218e0856382763.
//
// Solidity: e ReceivedERC20(_from indexed address, _tokenId indexed uint256, _erc20Contract indexed address, _value uint256)
func (_PvcERC998 *PvcERC998Filterer) FilterReceivedERC20(opts *bind.FilterOpts, _from []common.Address, _tokenId []*big.Int, _erc20Contract []common.Address) (*PvcERC998ReceivedERC20Iterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _erc20ContractRule []interface{}
	for _, _erc20ContractItem := range _erc20Contract {
		_erc20ContractRule = append(_erc20ContractRule, _erc20ContractItem)
	}

	logs, sub, err := _PvcERC998.contract.FilterLogs(opts, "ReceivedERC20", _fromRule, _tokenIdRule, _erc20ContractRule)
	if err != nil {
		return nil, err
	}
	return &PvcERC998ReceivedERC20Iterator{contract: _PvcERC998.contract, event: "ReceivedERC20", logs: logs, sub: sub}, nil
}

// WatchReceivedERC20 is a free log subscription operation binding the contract event 0x684ce28ace37552c6bfb98b7cceda8ed55327078eafb5dfb31218e0856382763.
//
// Solidity: e ReceivedERC20(_from indexed address, _tokenId indexed uint256, _erc20Contract indexed address, _value uint256)
func (_PvcERC998 *PvcERC998Filterer) WatchReceivedERC20(opts *bind.WatchOpts, sink chan<- *PvcERC998ReceivedERC20, _from []common.Address, _tokenId []*big.Int, _erc20Contract []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _erc20ContractRule []interface{}
	for _, _erc20ContractItem := range _erc20Contract {
		_erc20ContractRule = append(_erc20ContractRule, _erc20ContractItem)
	}

	logs, sub, err := _PvcERC998.contract.WatchLogs(opts, "ReceivedERC20", _fromRule, _tokenIdRule, _erc20ContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PvcERC998ReceivedERC20)
				if err := _PvcERC998.contract.UnpackLog(event, "ReceivedERC20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PvcERC998TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the PvcERC998 contract.
type PvcERC998TransferIterator struct {
	Event *PvcERC998Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PvcERC998TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PvcERC998Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PvcERC998Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PvcERC998TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PvcERC998TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PvcERC998Transfer represents a Transfer event raised by the PvcERC998 contract.
type PvcERC998Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, tokenId indexed uint256)
func (_PvcERC998 *PvcERC998Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*PvcERC998TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PvcERC998.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &PvcERC998TransferIterator{contract: _PvcERC998.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, tokenId indexed uint256)
func (_PvcERC998 *PvcERC998Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PvcERC998Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PvcERC998.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PvcERC998Transfer)
				if err := _PvcERC998.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PvcERC998TransferChildIterator is returned from FilterTransferChild and is used to iterate over the raw logs and unpacked data for TransferChild events raised by the PvcERC998 contract.
type PvcERC998TransferChildIterator struct {
	Event *PvcERC998TransferChild // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PvcERC998TransferChildIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PvcERC998TransferChild)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PvcERC998TransferChild)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PvcERC998TransferChildIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PvcERC998TransferChildIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PvcERC998TransferChild represents a TransferChild event raised by the PvcERC998 contract.
type PvcERC998TransferChild struct {
	TokenId       *big.Int
	To            common.Address
	ChildContract common.Address
	ChildTokenId  *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTransferChild is a free log retrieval operation binding the contract event 0x0ef52e516fb5aec15a5d3587e5480481b702b26db93c8430eca78b61990fd3f6.
//
// Solidity: e TransferChild(tokenId indexed uint256, _to indexed address, _childContract indexed address, _childTokenId uint256)
func (_PvcERC998 *PvcERC998Filterer) FilterTransferChild(opts *bind.FilterOpts, tokenId []*big.Int, _to []common.Address, _childContract []common.Address) (*PvcERC998TransferChildIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _childContractRule []interface{}
	for _, _childContractItem := range _childContract {
		_childContractRule = append(_childContractRule, _childContractItem)
	}

	logs, sub, err := _PvcERC998.contract.FilterLogs(opts, "TransferChild", tokenIdRule, _toRule, _childContractRule)
	if err != nil {
		return nil, err
	}
	return &PvcERC998TransferChildIterator{contract: _PvcERC998.contract, event: "TransferChild", logs: logs, sub: sub}, nil
}

// WatchTransferChild is a free log subscription operation binding the contract event 0x0ef52e516fb5aec15a5d3587e5480481b702b26db93c8430eca78b61990fd3f6.
//
// Solidity: e TransferChild(tokenId indexed uint256, _to indexed address, _childContract indexed address, _childTokenId uint256)
func (_PvcERC998 *PvcERC998Filterer) WatchTransferChild(opts *bind.WatchOpts, sink chan<- *PvcERC998TransferChild, tokenId []*big.Int, _to []common.Address, _childContract []common.Address) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _childContractRule []interface{}
	for _, _childContractItem := range _childContract {
		_childContractRule = append(_childContractRule, _childContractItem)
	}

	logs, sub, err := _PvcERC998.contract.WatchLogs(opts, "TransferChild", tokenIdRule, _toRule, _childContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PvcERC998TransferChild)
				if err := _PvcERC998.contract.UnpackLog(event, "TransferChild", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PvcERC998TransferERC20Iterator is returned from FilterTransferERC20 and is used to iterate over the raw logs and unpacked data for TransferERC20 events raised by the PvcERC998 contract.
type PvcERC998TransferERC20Iterator struct {
	Event *PvcERC998TransferERC20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PvcERC998TransferERC20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PvcERC998TransferERC20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PvcERC998TransferERC20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PvcERC998TransferERC20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PvcERC998TransferERC20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PvcERC998TransferERC20 represents a TransferERC20 event raised by the PvcERC998 contract.
type PvcERC998TransferERC20 struct {
	TokenId       *big.Int
	To            common.Address
	Erc20Contract common.Address
	Value         *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTransferERC20 is a free log retrieval operation binding the contract event 0xa8352277873fc0d2b233b8127433da351a4164fa701ed6ff79655694222932c4.
//
// Solidity: e TransferERC20(_tokenId indexed uint256, _to indexed address, _erc20Contract indexed address, _value uint256)
func (_PvcERC998 *PvcERC998Filterer) FilterTransferERC20(opts *bind.FilterOpts, _tokenId []*big.Int, _to []common.Address, _erc20Contract []common.Address) (*PvcERC998TransferERC20Iterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _erc20ContractRule []interface{}
	for _, _erc20ContractItem := range _erc20Contract {
		_erc20ContractRule = append(_erc20ContractRule, _erc20ContractItem)
	}

	logs, sub, err := _PvcERC998.contract.FilterLogs(opts, "TransferERC20", _tokenIdRule, _toRule, _erc20ContractRule)
	if err != nil {
		return nil, err
	}
	return &PvcERC998TransferERC20Iterator{contract: _PvcERC998.contract, event: "TransferERC20", logs: logs, sub: sub}, nil
}

// WatchTransferERC20 is a free log subscription operation binding the contract event 0xa8352277873fc0d2b233b8127433da351a4164fa701ed6ff79655694222932c4.
//
// Solidity: e TransferERC20(_tokenId indexed uint256, _to indexed address, _erc20Contract indexed address, _value uint256)
func (_PvcERC998 *PvcERC998Filterer) WatchTransferERC20(opts *bind.WatchOpts, sink chan<- *PvcERC998TransferERC20, _tokenId []*big.Int, _to []common.Address, _erc20Contract []common.Address) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _erc20ContractRule []interface{}
	for _, _erc20ContractItem := range _erc20Contract {
		_erc20ContractRule = append(_erc20ContractRule, _erc20ContractItem)
	}

	logs, sub, err := _PvcERC998.contract.WatchLogs(opts, "TransferERC20", _tokenIdRule, _toRule, _erc20ContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PvcERC998TransferERC20)
				if err := _PvcERC998.contract.UnpackLog(event, "TransferERC20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PvcERC998UnlockIterator is returned from FilterUnlock and is used to iterate over the raw logs and unpacked data for Unlock events raised by the PvcERC998 contract.
type PvcERC998UnlockIterator struct {
	Event *PvcERC998Unlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PvcERC998UnlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PvcERC998Unlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PvcERC998Unlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PvcERC998UnlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PvcERC998UnlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PvcERC998Unlock represents a Unlock event raised by the PvcERC998 contract.
type PvcERC998Unlock struct {
	Operator common.Address
	Owner    common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUnlock is a free log retrieval operation binding the contract event 0xc1c90b8e0705b212262c0dbd7580efe1862c2f185bf96899226f7596beb2db09.
//
// Solidity: e Unlock(operator address, owner address, tokenId uint256)
func (_PvcERC998 *PvcERC998Filterer) FilterUnlock(opts *bind.FilterOpts) (*PvcERC998UnlockIterator, error) {

	logs, sub, err := _PvcERC998.contract.FilterLogs(opts, "Unlock")
	if err != nil {
		return nil, err
	}
	return &PvcERC998UnlockIterator{contract: _PvcERC998.contract, event: "Unlock", logs: logs, sub: sub}, nil
}

// WatchUnlock is a free log subscription operation binding the contract event 0xc1c90b8e0705b212262c0dbd7580efe1862c2f185bf96899226f7596beb2db09.
//
// Solidity: e Unlock(operator address, owner address, tokenId uint256)
func (_PvcERC998 *PvcERC998Filterer) WatchUnlock(opts *bind.WatchOpts, sink chan<- *PvcERC998Unlock) (event.Subscription, error) {

	logs, sub, err := _PvcERC998.contract.WatchLogs(opts, "Unlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PvcERC998Unlock)
				if err := _PvcERC998.contract.UnpackLog(event, "Unlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
